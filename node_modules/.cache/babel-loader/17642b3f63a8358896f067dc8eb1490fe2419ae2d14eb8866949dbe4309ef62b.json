{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { loginUser, createUser, signOut, checkAuth, resetPasswordRequest, resetPassword } from './authAPI';\nimport { updateUser } from '../user/userAPI';\nconst initialState = {\n  loggedInUserToken: null,\n  // this should only contain user identity => 'id'/'role'\n  status: 'idle',\n  error: null,\n  userChecked: false,\n  mailSent: false,\n  passwordReset: false\n};\nexport const createUserAsync = createAsyncThunk('user/createUser', async userData => {\n  const response = await createUser(userData);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const loginUserAsync = createAsyncThunk('user/loginUser', async (loginInfo, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await loginUser(loginInfo);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n    return rejectWithValue(error);\n  }\n});\nexport const checkAuthAsync = createAsyncThunk('user/checkAuth', async () => {\n  try {\n    const response = await checkAuth();\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n});\nexport const resetPasswordRequestAsync = createAsyncThunk('user/resetPasswordRequest', async (email, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await resetPasswordRequest(email);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n    return rejectWithValue(error);\n  }\n});\nexport const resetPasswordAsync = createAsyncThunk('user/resetPassword', async (data, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await resetPassword(data);\n    console.log(response);\n    return response.data;\n  } catch (error) {\n    console.log(error);\n    return rejectWithValue(error);\n  }\n});\nexport const signOutAsync = createAsyncThunk('user/signOut', async () => {\n  const response = await signOut();\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const authSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(createUserAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(createUserAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.loggedInUserToken = action.payload;\n    }).addCase(loginUserAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(loginUserAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.loggedInUserToken = action.payload;\n    }).addCase(loginUserAsync.rejected, (state, action) => {\n      state.status = 'idle';\n      state.error = action.payload;\n    }).addCase(signOutAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(signOutAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.loggedInUserToken = null;\n    }).addCase(checkAuthAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(checkAuthAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.loggedInUserToken = action.payload;\n      state.userChecked = true;\n    }).addCase(checkAuthAsync.rejected, (state, action) => {\n      state.status = 'idle';\n      state.userChecked = true;\n    }).addCase(resetPasswordRequestAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(resetPasswordRequestAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.mailSent = true;\n    }).addCase(resetPasswordAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(resetPasswordAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.passwordReset = true;\n    }).addCase(resetPasswordAsync.rejected, (state, action) => {\n      state.status = 'idle';\n      state.error = action.payload;\n    });\n  }\n});\nexport const selectLoggedInUser = state => state.auth.loggedInUserToken;\nexport const selectError = state => state.auth.error;\nexport const selectUserChecked = state => state.auth.userChecked;\nexport const selectMailSent = state => state.auth.mailSent;\nexport const selectPasswordReset = state => state.auth.passwordReset;\n\n// export const { } = authSlice.actions;\n\nexport default authSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","loginUser","createUser","signOut","checkAuth","resetPasswordRequest","resetPassword","updateUser","initialState","loggedInUserToken","status","error","userChecked","mailSent","passwordReset","createUserAsync","userData","response","data","loginUserAsync","loginInfo","rejectWithValue","console","log","checkAuthAsync","resetPasswordRequestAsync","email","resetPasswordAsync","signOutAsync","authSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","selectLoggedInUser","auth","selectError","selectUserChecked","selectMailSent","selectPasswordReset","reducer"],"sources":["/home/hyphen/MERN-ecommerce-Frontend/src/features/auth/authSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport {\n  loginUser,\n  createUser,\n  signOut,\n  checkAuth,\n  resetPasswordRequest,\n  resetPassword,\n} from './authAPI';\nimport { updateUser } from '../user/userAPI';\n\nconst initialState = {\n  loggedInUserToken: null, // this should only contain user identity => 'id'/'role'\n  status: 'idle',\n  error: null,\n  userChecked: false,\n  mailSent: false,\n  passwordReset:false\n};\n\nexport const createUserAsync = createAsyncThunk(\n  'user/createUser',\n  async (userData) => {\n    const response = await createUser(userData);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const loginUserAsync = createAsyncThunk(\n  'user/loginUser',\n  async (loginInfo, { rejectWithValue }) => {\n    try {\n      const response = await loginUser(loginInfo);\n      return response.data;\n    } catch (error) {\n      console.log(error);\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const checkAuthAsync = createAsyncThunk('user/checkAuth', async () => {\n  try {\n    const response = await checkAuth();\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n});\nexport const resetPasswordRequestAsync = createAsyncThunk(\n  'user/resetPasswordRequest',\n  async (email,{rejectWithValue}) => {\n    try {\n      const response = await resetPasswordRequest(email);\n      return response.data;\n    } catch (error) {\n      console.log(error);\n      return rejectWithValue(error);\n\n    }\n  }\n);\n\nexport const resetPasswordAsync = createAsyncThunk(\n  'user/resetPassword',\n  async (data,{rejectWithValue}) => {\n    try {\n      const response = await resetPassword(data);\n      console.log(response);\n      return response.data;\n    } catch (error) {\n      console.log(error);\n      return rejectWithValue(error);\n\n    }\n  }\n);\n\nexport const signOutAsync = createAsyncThunk(\n  'user/signOut',\n  async () => {\n    const response = await signOut();\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const authSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(createUserAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(createUserAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.loggedInUserToken = action.payload;\n      })\n      .addCase(loginUserAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(loginUserAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.loggedInUserToken = action.payload;\n      })\n      .addCase(loginUserAsync.rejected, (state, action) => {\n        state.status = 'idle';\n        state.error = action.payload;\n      })\n      .addCase(signOutAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(signOutAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.loggedInUserToken = null;\n      })\n      .addCase(checkAuthAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(checkAuthAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.loggedInUserToken = action.payload;\n        state.userChecked = true;\n      })\n      .addCase(checkAuthAsync.rejected, (state, action) => {\n        state.status = 'idle';\n        state.userChecked = true;\n      })\n      .addCase(resetPasswordRequestAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(resetPasswordRequestAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.mailSent = true;\n      })\n      .addCase(resetPasswordAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(resetPasswordAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.passwordReset = true;\n      })\n      .addCase(resetPasswordAsync.rejected, (state, action) => {\n        state.status = 'idle';\n        state.error = action.payload\n      })\n  },\n});\n\nexport const selectLoggedInUser = (state) => state.auth.loggedInUserToken;\nexport const selectError = (state) => state.auth.error;\nexport const selectUserChecked = (state) => state.auth.userChecked;\nexport const selectMailSent = (state) => state.auth.mailSent;\nexport const selectPasswordReset = (state) => state.auth.passwordReset;\n\n// export const { } = authSlice.actions;\n\nexport default authSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}