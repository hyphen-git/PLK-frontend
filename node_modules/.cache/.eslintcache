[{"/home/hyphen/MERN-ecommerce-Frontend/src/index.js":"1","/home/hyphen/MERN-ecommerce-Frontend/src/App.js":"2","/home/hyphen/MERN-ecommerce-Frontend/src/reportWebVitals.js":"3","/home/hyphen/MERN-ecommerce-Frontend/src/app/store.js":"4","/home/hyphen/MERN-ecommerce-Frontend/src/pages/ProductDetailPage.js":"5","/home/hyphen/MERN-ecommerce-Frontend/src/pages/AdminHome.js":"6","/home/hyphen/MERN-ecommerce-Frontend/src/pages/OrderSuccessPage.js":"7","/home/hyphen/MERN-ecommerce-Frontend/src/pages/ForgotPasswordPage.js":"8","/home/hyphen/MERN-ecommerce-Frontend/src/pages/UserOrdersPage.js":"9","/home/hyphen/MERN-ecommerce-Frontend/src/pages/UserProfilePage.js":"10","/home/hyphen/MERN-ecommerce-Frontend/src/pages/AdminProductDetailPage.js":"11","/home/hyphen/MERN-ecommerce-Frontend/src/pages/AdminProductFormPage.js":"12","/home/hyphen/MERN-ecommerce-Frontend/src/pages/Checkout.js":"13","/home/hyphen/MERN-ecommerce-Frontend/src/pages/CartPage.js":"14","/home/hyphen/MERN-ecommerce-Frontend/src/pages/404.js":"15","/home/hyphen/MERN-ecommerce-Frontend/src/pages/SignupPage.js":"16","/home/hyphen/MERN-ecommerce-Frontend/src/pages/LoginPage.js":"17","/home/hyphen/MERN-ecommerce-Frontend/src/pages/Home.js":"18","/home/hyphen/MERN-ecommerce-Frontend/src/pages/StripeCheckout.js":"19","/home/hyphen/MERN-ecommerce-Frontend/src/pages/AdminOrdersPage.js":"20","/home/hyphen/MERN-ecommerce-Frontend/src/pages/ResetPasswordPage.js":"21","/home/hyphen/MERN-ecommerce-Frontend/src/features/counter/Counter.js":"22","/home/hyphen/MERN-ecommerce-Frontend/src/features/cart/cartSlice.js":"23","/home/hyphen/MERN-ecommerce-Frontend/src/features/auth/authSlice.js":"24","/home/hyphen/MERN-ecommerce-Frontend/src/features/user/userSlice.js":"25","/home/hyphen/MERN-ecommerce-Frontend/src/features/auth/components/Protected.js":"26","/home/hyphen/MERN-ecommerce-Frontend/src/features/auth/components/ProtectedAdmin.js":"27","/home/hyphen/MERN-ecommerce-Frontend/src/features/auth/components/Logout.js":"28","/home/hyphen/MERN-ecommerce-Frontend/src/features/product/productSlice.js":"29","/home/hyphen/MERN-ecommerce-Frontend/src/features/order/orderSlice.js":"30","/home/hyphen/MERN-ecommerce-Frontend/src/features/cart/Cart.js":"31","/home/hyphen/MERN-ecommerce-Frontend/src/features/auth/components/Login.js":"32","/home/hyphen/MERN-ecommerce-Frontend/src/features/auth/components/ForgotPassword.js":"33","/home/hyphen/MERN-ecommerce-Frontend/src/features/auth/components/Signup.js":"34","/home/hyphen/MERN-ecommerce-Frontend/src/pages/CheckoutForm.js":"35","/home/hyphen/MERN-ecommerce-Frontend/src/features/auth/components/ResetPassword.js":"36","/home/hyphen/MERN-ecommerce-Frontend/src/features/common/Footer.js":"37","/home/hyphen/MERN-ecommerce-Frontend/src/features/navbar/Navbar.js":"38","/home/hyphen/MERN-ecommerce-Frontend/src/features/product/components/ProductDetail.js":"39","/home/hyphen/MERN-ecommerce-Frontend/src/features/product/components/ProductList.js":"40","/home/hyphen/MERN-ecommerce-Frontend/src/features/user/components/UserOrders.js":"41","/home/hyphen/MERN-ecommerce-Frontend/src/features/user/userAPI.js":"42","/home/hyphen/MERN-ecommerce-Frontend/src/features/counter/counterSlice.js":"43","/home/hyphen/MERN-ecommerce-Frontend/src/features/auth/authAPI.js":"44","/home/hyphen/MERN-ecommerce-Frontend/src/features/cart/cartAPI.js":"45","/home/hyphen/MERN-ecommerce-Frontend/src/features/product/productAPI.js":"46","/home/hyphen/MERN-ecommerce-Frontend/src/features/user/components/UserProfile.js":"47","/home/hyphen/MERN-ecommerce-Frontend/src/features/admin/components/AdminProductList.js":"48","/home/hyphen/MERN-ecommerce-Frontend/src/features/admin/components/AdminProductDetail.js":"49","/home/hyphen/MERN-ecommerce-Frontend/src/features/order/orderAPI.js":"50","/home/hyphen/MERN-ecommerce-Frontend/src/features/admin/components/ProductForm.js":"51","/home/hyphen/MERN-ecommerce-Frontend/src/features/admin/components/AdminOrders.js":"52","/home/hyphen/MERN-ecommerce-Frontend/src/features/common/Modal.js":"53","/home/hyphen/MERN-ecommerce-Frontend/src/app/constants.js":"54","/home/hyphen/MERN-ecommerce-Frontend/src/features/counter/counterAPI.js":"55","/home/hyphen/MERN-ecommerce-Frontend/src/features/common/Pagination.js":"56"},{"size":686,"mtime":1692562606215,"results":"57","hashOfConfig":"58"},{"size":4849,"mtime":1692562606215,"results":"59","hashOfConfig":"58"},{"size":362,"mtime":1692562606218,"results":"60","hashOfConfig":"58"},{"size":532,"mtime":1692562606215,"results":"61","hashOfConfig":"58"},{"size":410,"mtime":1692562606218,"results":"62","hashOfConfig":"58"},{"size":326,"mtime":1692562606215,"results":"63","hashOfConfig":"58"},{"size":1654,"mtime":1692562606218,"results":"64","hashOfConfig":"58"},{"size":218,"mtime":1692562606215,"results":"65","hashOfConfig":"58"},{"size":334,"mtime":1692562606218,"results":"66","hashOfConfig":"58"},{"size":340,"mtime":1692562606218,"results":"67","hashOfConfig":"58"},{"size":359,"mtime":1692562606215,"results":"68","hashOfConfig":"58"},{"size":327,"mtime":1692562606215,"results":"69","hashOfConfig":"58"},{"size":21675,"mtime":1692564712963,"results":"70","hashOfConfig":"58"},{"size":143,"mtime":1692562606215,"results":"71","hashOfConfig":"58"},{"size":1025,"mtime":1692562606215,"results":"72","hashOfConfig":"58"},{"size":192,"mtime":1692562606218,"results":"73","hashOfConfig":"58"},{"size":164,"mtime":1692562606218,"results":"74","hashOfConfig":"58"},{"size":417,"mtime":1692562606218,"results":"75","hashOfConfig":"58"},{"size":1505,"mtime":1692562606218,"results":"76","hashOfConfig":"58"},{"size":318,"mtime":1692562606215,"results":"77","hashOfConfig":"58"},{"size":213,"mtime":1692562606218,"results":"78","hashOfConfig":"58"},{"size":371,"mtime":1692562606215,"results":"79","hashOfConfig":"58"},{"size":3469,"mtime":1692562606215,"results":"80","hashOfConfig":"58"},{"size":4533,"mtime":1692562606215,"results":"81","hashOfConfig":"58"},{"size":2461,"mtime":1692562606215,"results":"82","hashOfConfig":"58"},{"size":352,"mtime":1692562606215,"results":"83","hashOfConfig":"58"},{"size":569,"mtime":1692562606215,"results":"84","hashOfConfig":"58"},{"size":535,"mtime":1692562606215,"results":"85","hashOfConfig":"58"},{"size":4277,"mtime":1692562606215,"results":"86","hashOfConfig":"58"},{"size":2518,"mtime":1692562606215,"results":"87","hashOfConfig":"58"},{"size":6560,"mtime":1692564608905,"results":"88","hashOfConfig":"58"},{"size":4574,"mtime":1692562606215,"results":"89","hashOfConfig":"58"},{"size":3193,"mtime":1692562606215,"results":"90","hashOfConfig":"58"},{"size":5868,"mtime":1692562606215,"results":"91","hashOfConfig":"58"},{"size":2924,"mtime":1692562606215,"results":"92","hashOfConfig":"58"},{"size":5118,"mtime":1692562606215,"results":"93","hashOfConfig":"58"},{"size":1963,"mtime":1692563609326,"results":"94","hashOfConfig":"58"},{"size":10765,"mtime":1692563416053,"results":"95","hashOfConfig":"58"},{"size":14913,"mtime":1692564478156,"results":"96","hashOfConfig":"58"},{"size":17301,"mtime":1692564860095,"results":"97","hashOfConfig":"58"},{"size":5301,"mtime":1692562606215,"results":"98","hashOfConfig":"58"},{"size":735,"mtime":1692562606215,"results":"99","hashOfConfig":"58"},{"size":1003,"mtime":1692562606215,"results":"100","hashOfConfig":"58"},{"size":2720,"mtime":1692562606215,"results":"101","hashOfConfig":"58"},{"size":1485,"mtime":1692562606215,"results":"102","hashOfConfig":"58"},{"size":2187,"mtime":1692562606215,"results":"103","hashOfConfig":"58"},{"size":24393,"mtime":1692562606215,"results":"104","hashOfConfig":"58"},{"size":21411,"mtime":1692562606215,"results":"105","hashOfConfig":"58"},{"size":14944,"mtime":1692564768126,"results":"106","hashOfConfig":"58"},{"size":1173,"mtime":1692562606215,"results":"107","hashOfConfig":"58"},{"size":25341,"mtime":1692562606215,"results":"108","hashOfConfig":"58"},{"size":11718,"mtime":1692562606215,"results":"109","hashOfConfig":"58"},{"size":4150,"mtime":1692562606215,"results":"110","hashOfConfig":"58"},{"size":34,"mtime":1692562606215,"results":"111","hashOfConfig":"58"},{"size":197,"mtime":1692562606215,"results":"112","hashOfConfig":"58"},{"size":3817,"mtime":1692562606215,"results":"113","hashOfConfig":"58"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13289iq",{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156"},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","suppressedMessages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172"},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176"},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186"},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","suppressedMessages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"203","messages":"204","suppressedMessages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","suppressedMessages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209"},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219"},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223"},{"filePath":"224","messages":"225","suppressedMessages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227"},{"filePath":"228","messages":"229","suppressedMessages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","suppressedMessages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240"},{"filePath":"241","messages":"242","suppressedMessages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244"},{"filePath":"245","messages":"246","suppressedMessages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248"},{"filePath":"249","messages":"250","suppressedMessages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252"},{"filePath":"253","messages":"254","suppressedMessages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"256","messages":"257","suppressedMessages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","suppressedMessages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","suppressedMessages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265"},{"filePath":"266","messages":"267","suppressedMessages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","suppressedMessages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"272","messages":"273","suppressedMessages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275"},{"filePath":"276","messages":"277","suppressedMessages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279"},{"filePath":"280","messages":"281","suppressedMessages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","suppressedMessages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286"},{"filePath":"287","messages":"288","suppressedMessages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"290","messages":"291","suppressedMessages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","suppressedMessages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"296","messages":"297","suppressedMessages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","suppressedMessages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/hyphen/MERN-ecommerce-Frontend/src/index.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/App.js",["302","303"],[],"import { Counter } from './features/counter/Counter';\nimport './App.css';\nimport Home from './pages/Home';\nimport LoginPage from './pages/LoginPage';\nimport SignupPage from './pages/SignupPage';\n\nimport { createBrowserRouter, Link, RouterProvider } from 'react-router-dom';\nimport CartPage from './pages/CartPage';\nimport Checkout from './pages/Checkout';\nimport ProductDetailPage from './pages/ProductDetailPage';\nimport Protected from './features/auth/components/Protected';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  checkAuthAsync,\n  selectLoggedInUser,\n  selectUserChecked,\n} from './features/auth/authSlice';\nimport { fetchItemsByUserIdAsync } from './features/cart/cartSlice';\nimport PageNotFound from './pages/404';\nimport OrderSuccessPage from './pages/OrderSuccessPage';\nimport UserOrdersPage from './pages/UserOrdersPage';\nimport UserProfilePage from './pages/UserProfilePage';\nimport { fetchLoggedInUserAsync } from './features/user/userSlice';\nimport Logout from './features/auth/components/Logout';\nimport ForgotPasswordPage from './pages/ForgotPasswordPage';\nimport ProtectedAdmin from './features/auth/components/ProtectedAdmin';\nimport AdminHome from './pages/AdminHome';\nimport AdminProductDetailPage from './pages/AdminProductDetailPage';\nimport AdminProductFormPage from './pages/AdminProductFormPage';\nimport AdminOrdersPage from './pages/AdminOrdersPage';\nimport { positions, Provider } from 'react-alert';\nimport AlertTemplate from 'react-alert-template-basic';\nimport StripeCheckout from './pages/StripeCheckout';\nimport ResetPasswordPage from './pages/ResetPasswordPage';\n\nconst options = {\n  timeout: 5000,\n  position: positions.BOTTOM_LEFT,\n};\n\nconst router = createBrowserRouter([\n  {\n    path: '/',\n    element: (\n      <Protected>\n        <Home></Home>\n      </Protected>\n    ),\n  },\n  {\n    path: '/admin',\n    element: (\n      <ProtectedAdmin>\n        <AdminHome></AdminHome>\n      </ProtectedAdmin>\n    ),\n  },\n  {\n    path: '/login',\n    element: <LoginPage></LoginPage>,\n  },\n  {\n    path: '/signup',\n    element: <SignupPage></SignupPage>,\n  },\n  {\n    path: '/cart',\n    element: (\n      <Protected>\n        <CartPage></CartPage>\n      </Protected>\n    ),\n  },\n  {\n    path: '/checkout',\n    element: (\n      <Protected>\n        <Checkout></Checkout>\n      </Protected>\n    ),\n  },\n  {\n    path: '/product-detail/:id',\n    element: (\n      <Protected>\n        <ProductDetailPage></ProductDetailPage>\n      </Protected>\n    ),\n  },\n  {\n    path: '/admin/product-detail/:id',\n    element: (\n      <ProtectedAdmin>\n        <AdminProductDetailPage></AdminProductDetailPage>\n      </ProtectedAdmin>\n    ),\n  },\n  {\n    path: '/admin/product-form',\n    element: (\n      <ProtectedAdmin>\n        <AdminProductFormPage></AdminProductFormPage>\n      </ProtectedAdmin>\n    ),\n  },\n  {\n    path: '/admin/orders',\n    element: (\n      <ProtectedAdmin>\n        <AdminOrdersPage></AdminOrdersPage>\n      </ProtectedAdmin>\n    ),\n  },\n  {\n    path: '/admin/product-form/edit/:id',\n    element: (\n      <ProtectedAdmin>\n        <AdminProductFormPage></AdminProductFormPage>\n      </ProtectedAdmin>\n    ),\n  },\n  {\n    path: '/order-success/:id',\n    element: (\n      <Protected>\n        <OrderSuccessPage></OrderSuccessPage>{' '}\n      </Protected>\n    ),\n  },\n  {\n    path: '/my-orders',\n    element: (\n      <Protected>\n        <UserOrdersPage></UserOrdersPage>{' '}\n      </Protected>\n    ),\n  },\n  {\n    path: '/profile',\n    element: (\n      <Protected>\n        <UserProfilePage></UserProfilePage>{' '}\n      </Protected>\n    ),\n  },\n  {\n    path: '/stripe-checkout/',\n    element: (\n      <Protected>\n        <StripeCheckout></StripeCheckout>\n      </Protected>\n    ),\n  },\n  {\n    path: '/logout',\n    element: <Logout></Logout>,\n  },\n  {\n    path: '/forgot-password',\n    element: <ForgotPasswordPage></ForgotPasswordPage>,\n  },\n  {\n    path: '/reset-password',\n    element: <ResetPasswordPage></ResetPasswordPage>,\n  },\n  {\n    path: '*',\n    element: <PageNotFound></PageNotFound>,\n  },\n]);\n\nfunction App() {\n  const dispatch = useDispatch();\n  const user = useSelector(selectLoggedInUser);\n  const userChecked = useSelector(selectUserChecked);\n\n  useEffect(() => {\n    dispatch(checkAuthAsync());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (user) {\n      dispatch(fetchItemsByUserIdAsync());\n      // we can get req.user by token on backend so no need to give in front-end\n      dispatch(fetchLoggedInUserAsync());\n    }\n  }, [dispatch, user]);\n\n  return (\n    <>\n      <div className=\"App\">\n        {userChecked && (\n          <Provider template={AlertTemplate} {...options}>\n            <RouterProvider router={router} />\n          </Provider>\n        )}\n        {/* Link must be inside the Provider */}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","/home/hyphen/MERN-ecommerce-Frontend/src/reportWebVitals.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/app/store.js",["304"],[],"import { configureStore, createReducer } from '@reduxjs/toolkit';\nimport productReducer from '../features/product/productSlice';\nimport authReducer from '../features/auth/authSlice';\nimport cartReducer from '../features/cart/cartSlice';\nimport orderReducer from '../features/order/orderSlice';\nimport userReducer from '../features/user/userSlice';\n\nexport const store = configureStore({\n  reducer: {\n    product: productReducer,\n    auth: authReducer,\n    cart: cartReducer,\n    order: orderReducer,\n    user: userReducer,\n  },\n});\n","/home/hyphen/MERN-ecommerce-Frontend/src/pages/ProductDetailPage.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/pages/AdminHome.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/pages/OrderSuccessPage.js",["305","306"],[],"import { useEffect } from \"react\";\nimport { Link, Navigate, useParams } from \"react-router-dom\";\nimport { resetCartAsync } from \"../features/cart/cartSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectLoggedInUser } from \"../features/auth/authSlice\";\nimport { resetOrder } from \"../features/order/orderSlice\";\n\nfunction OrderSuccessPage() {\n   const params = useParams() \n   const dispatch = useDispatch();\n   \n   useEffect(()=>{\n    // reset cart\n    dispatch(resetCartAsync())\n    // reset currentOrder\n    dispatch(resetOrder())\n   },[dispatch])\n   \n  return (\n    <>\n    {!params.id &&  <Navigate to='/' replace={true}></Navigate>}\n    <main className=\"grid min-h-full place-items-center bg-white px-6 py-24 sm:py-32 lg:px-8\">\n      <div className=\"text-center\">\n        <p className=\"text-base font-semibold text-indigo-600\">Order Successfully Placed</p>\n        <h1 className=\"mt-4 text-3xl font-bold tracking-tight text-gray-900 sm:text-5xl\">\n          Order Number #{params?.id}\n        </h1>\n        <p className=\"mt-6 text-base leading-7 text-gray-600\">\n          You can check your order in My Account > My Orders\n        </p>\n        <div className=\"mt-10 flex items-center justify-center gap-x-6\">\n          <Link\n            to=\"/\"\n            className=\"rounded-md bg-indigo-600 px-3.5 py-2.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n          >\n            Go back home\n          </Link>\n        </div>\n      </div>\n    </main>\n    </>\n  );\n}\n\nexport default OrderSuccessPage;\n","/home/hyphen/MERN-ecommerce-Frontend/src/pages/ForgotPasswordPage.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/pages/UserOrdersPage.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/pages/UserProfilePage.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/pages/AdminProductDetailPage.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/pages/AdminProductFormPage.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/pages/Checkout.js",["307"],[],"import { Link } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  deleteItemFromCartAsync,\n  selectItems,\n  updateCartAsync,\n} from '../features/cart/cartSlice';\nimport { Navigate } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport { updateUserAsync } from '../features/user/userSlice';\nimport { useState } from 'react';\nimport {\n  createOrderAsync,\n  selectCurrentOrder,\n  selectStatus,\n} from '../features/order/orderSlice';\nimport { selectUserInfo } from '../features/user/userSlice';\nimport { Grid } from 'react-loader-spinner';\n\nfunction Checkout() {\n  const dispatch = useDispatch();\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm();\n\n  const user = useSelector(selectUserInfo);\n  const items = useSelector(selectItems);\n  const status = useSelector(selectStatus);\n  const currentOrder = useSelector(selectCurrentOrder);\n\n  const totalAmount = items.reduce(\n    (amount, item) => item.product.discountPrice * item.quantity + amount,\n    0\n  );\n  const totalItems = items.reduce((total, item) => item.quantity + total, 0);\n\n  const [selectedAddress, setSelectedAddress] = useState(null);\n  const [paymentMethod, setPaymentMethod] = useState(null);\n\n  const handleQuantity = (e, item) => {\n    dispatch(updateCartAsync({ id: item.id, quantity: +e.target.value }));\n  };\n\n  const handleRemove = (e, id) => {\n    dispatch(deleteItemFromCartAsync(id));\n  };\n\n  const handleAddress = (e) => {\n    console.log(e.target.value);\n    setSelectedAddress(user.addresses[e.target.value]);\n  };\n\n  const handlePayment = (e) => {\n    console.log(e.target.value);\n    setPaymentMethod(e.target.value);\n  };\n\n  const handleOrder = (e) => {\n    if (selectedAddress && paymentMethod) {\n      const order = {\n        items,\n        totalAmount,\n        totalItems,\n        user: user.id,\n        paymentMethod,\n        selectedAddress,\n        status: 'pending', // other status can be delivered, received.\n      };\n      dispatch(createOrderAsync(order));\n      // need to redirect from here to a new page of order success.\n    } else {\n      \n      alert('Enter Address and Payment method');\n    }\n  };\n\n  return (\n    <>\n      {!items.length && <Navigate to=\"/\" replace={true}></Navigate>}\n      {currentOrder && currentOrder.paymentMethod === 'cash' && (\n        <Navigate\n          to={`/order-success/${currentOrder.id}`}\n          replace={true}\n        ></Navigate>\n      )}\n      {currentOrder && currentOrder.paymentMethod === 'card' && (\n        <Navigate to={`/stripe-checkout/`} replace={true}></Navigate>\n      )}\n\n      {status === 'loading' ? (\n        <Grid\n          height=\"80\"\n          width=\"80\"\n          color=\"rgb(79, 70, 229) \"\n          ariaLabel=\"grid-loading\"\n          radius=\"12.5\"\n          wrapperStyle={{}}\n          wrapperClass=\"\"\n          visible={true}\n        />\n      ) : <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 gap-x-8 gap-y-10 lg:grid-cols-5\">\n          <div className=\"lg:col-span-3\">\n            {/* This form is for address */}\n            <form\n              className=\"bg-white px-5 py-12 mt-12\"\n              noValidate\n              onSubmit={handleSubmit((data) => {\n                console.log(data);\n                dispatch(\n                  updateUserAsync({\n                    ...user,\n                    addresses: [...user.addresses, data],\n                  })\n                );\n                reset();\n              })}\n            >\n              <div className=\"space-y-12\">\n                <div className=\"border-b border-gray-900/10 pb-12\">\n                  <h2 className=\"text-2xl font-semibold leading-7 text-gray-900\">\n                    Personal Information\n                  </h2>\n                  <p className=\"mt-1 text-sm leading-6 text-gray-600\">\n                    Use a permanent address where you can receive mail.\n                  </p>\n\n                  <div className=\"mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6\">\n                    <div className=\"sm:col-span-4\">\n                      <label\n                        htmlFor=\"name\"\n                        className=\"block text-sm font-medium leading-6 text-gray-900\"\n                      >\n                        Full name\n                      </label>\n                      <div className=\"mt-2\">\n                        <input\n                          type=\"text\"\n                          {...register('name', {\n                            required: 'name is required',\n                          })}\n                          id=\"name\"\n                          className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\n                        />\n                        {errors.name && (\n                          <p className=\"text-red-500\">{errors.name.message}</p>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"sm:col-span-4\">\n                      <label\n                        htmlFor=\"email\"\n                        className=\"block text-sm font-medium leading-6 text-gray-900\"\n                      >\n                        Email address\n                      </label>\n                      <div className=\"mt-2\">\n                        <input\n                          id=\"email\"\n                          {...register('email', {\n                            required: 'email is required',\n                          })}\n                          type=\"email\"\n                          className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\n                        />\n                        {errors.email && (\n                          <p className=\"text-red-500\">{errors.email.message}</p>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"sm:col-span-3\">\n                      <label\n                        htmlFor=\"phone\"\n                        className=\"block text-sm font-medium leading-6 text-gray-900\"\n                      >\n                        Phone\n                      </label>\n                      <div className=\"mt-2\">\n                        <input\n                          id=\"phone\"\n                          {...register('phone', {\n                            required: 'phone is required',\n                          })}\n                          type=\"tel\"\n                          className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\n                        />\n                        {errors.phone && (\n                          <p className=\"text-red-500\">{errors.phone.message}</p>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"col-span-full\">\n                      <label\n                        htmlFor=\"street-address\"\n                        className=\"block text-sm font-medium leading-6 text-gray-900\"\n                      >\n                        Street address\n                      </label>\n                      <div className=\"mt-2\">\n                        <input\n                          type=\"text\"\n                          {...register('street', {\n                            required: 'street is required',\n                          })}\n                          id=\"street\"\n                          className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\n                        />\n                        {errors.street && (\n                          <p className=\"text-red-500\">\n                            {errors.street.message}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"sm:col-span-2 sm:col-start-1\">\n                      <label\n                        htmlFor=\"city\"\n                        className=\"block text-sm font-medium leading-6 text-gray-900\"\n                      >\n                        City\n                      </label>\n                      <div className=\"mt-2\">\n                        <input\n                          type=\"text\"\n                          {...register('city', {\n                            required: 'city is required',\n                          })}\n                          id=\"city\"\n                          autoComplete=\"address-level2\"\n                          className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\n                        />\n                        {errors.city && (\n                          <p className=\"text-red-500\">{errors.city.message}</p>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"sm:col-span-2\">\n                      <label\n                        htmlFor=\"state\"\n                        className=\"block text-sm font-medium leading-6 text-gray-900\"\n                      >\n                        State / Province\n                      </label>\n                      <div className=\"mt-2\">\n                        <input\n                          type=\"text\"\n                          {...register('state', {\n                            required: 'state is required',\n                          })}\n                          id=\"state\"\n                          autoComplete=\"address-level1\"\n                          className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\n                        />\n                        {errors.state && (\n                          <p className=\"text-red-500\">{errors.state.message}</p>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"sm:col-span-2\">\n                      <label\n                        htmlFor=\"pinCode\"\n                        className=\"block text-sm font-medium leading-6 text-gray-900\"\n                      >\n                        ZIP / Postal code\n                      </label>\n                      <div className=\"mt-2\">\n                        <input\n                          type=\"text\"\n                          {...register('pinCode', {\n                            required: 'pinCode is required',\n                          })}\n                          id=\"pinCode\"\n                          className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\n                        />\n                        {errors.pinCode && (\n                          <p className=\"text-red-500\">\n                            {errors.pinCode.message}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"mt-6 flex items-center justify-end gap-x-6\">\n                  <button\n                    // onClick={e=>reset()}\n                    type=\"button\"\n                    className=\"text-sm font-semibold leading-6 text-gray-900\"\n                  >\n                    Reset\n                  </button>\n                  <button\n                    type=\"submit\"\n                    className=\"rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n                  >\n                    Add Address\n                  </button>\n                </div>\n              </div>\n            </form>\n            <div className=\"border-b border-gray-900/10 pb-12\">\n              <h2 className=\"text-base font-semibold leading-7 text-gray-900\">\n                Addresses\n              </h2>\n              <p className=\"mt-1 text-sm leading-6 text-gray-600\">\n                Choose from Existing addresses\n              </p>\n              <ul>\n                {user.addresses.map((address, index) => (\n                  <li\n                    key={index}\n                    className=\"flex justify-between gap-x-6 px-5 py-5 border-solid border-2 border-gray-200\"\n                  >\n                    <div className=\"flex gap-x-4\">\n                      <input\n                        onChange={handleAddress}\n                        name=\"address\"\n                        type=\"radio\"\n                        value={index}\n                        className=\"h-4 w-4 border-gray-300 text-indigo-600 focus:ring-indigo-600\"\n                      />\n                      <div className=\"min-w-0 flex-auto\">\n                        <p className=\"text-sm font-semibold leading-6 text-gray-900\">\n                          {address.name}\n                        </p>\n                        <p className=\"mt-1 truncate text-xs leading-5 text-gray-500\">\n                          {address.street}\n                        </p>\n                        <p className=\"mt-1 truncate text-xs leading-5 text-gray-500\">\n                          {address.pinCode}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"hidden sm:flex sm:flex-col sm:items-end\">\n                      <p className=\"text-sm leading-6 text-gray-900\">\n                        Phone: {address.phone}\n                      </p>\n                      <p className=\"text-sm leading-6 text-gray-500\">\n                        {address.city}\n                      </p>\n                    </div>\n                  </li>\n                ))}\n              </ul>\n\n              <div className=\"mt-10 space-y-10\">\n                <fieldset>\n                  <legend className=\"text-sm font-semibold leading-6 text-gray-900\">\n                    Payment Methods\n                  </legend>\n                  <p className=\"mt-1 text-sm leading-6 text-gray-600\">\n                    Choose One\n                  </p>\n                  <div className=\"mt-6 space-y-6\">\n                    <div className=\"flex items-center gap-x-3\">\n                      <input\n                        id=\"cash\"\n                        name=\"payments\"\n                        onChange={handlePayment}\n                        value=\"cash\"\n                        type=\"radio\"\n                        checked={paymentMethod === 'cash'}\n                        className=\"h-4 w-4 border-gray-300 text-indigo-600 focus:ring-indigo-600\"\n                      />\n                      <label\n                        htmlFor=\"cash\"\n                        className=\"block text-sm font-medium leading-6 text-gray-900\"\n                      >\n                        Cash\n                      </label>\n                    </div>\n                    <div className=\"flex items-center gap-x-3\">\n                      <input\n                        id=\"card\"\n                        onChange={handlePayment}\n                        name=\"payments\"\n                        checked={paymentMethod === 'card'}\n                        value=\"card\"\n                        type=\"radio\"\n                        className=\"h-4 w-4 border-gray-300 text-indigo-600 focus:ring-indigo-600\"\n                      />\n                      <label\n                        htmlFor=\"card\"\n                        className=\"block text-sm font-medium leading-6 text-gray-900\"\n                      >\n                        Card Payment\n                      </label>\n                    </div>\n                  </div>\n                </fieldset>\n              </div>\n            </div>\n          </div>\n          <div className=\"lg:col-span-2\">\n            <div className=\"mx-auto mt-12 bg-white max-w-7xl px-2 sm:px-2 lg:px-4\">\n              <div className=\"border-t border-gray-200 px-0 py-6 sm:px-0\">\n                <h1 className=\"text-4xl my-5 font-bold tracking-tight text-gray-900\">\n                  Cart\n                </h1>\n                <div className=\"flow-root\">\n                  <ul role=\"list\" className=\"-my-6 divide-y divide-gray-200\">\n                    {items.map((item) => (\n                      <li key={item.id} className=\"flex py-6\">\n                        <div className=\"h-24 w-24 flex-shrink-0 overflow-hidden rounded-md border border-gray-200\">\n                          <img\n                            src={item.product.thumbnail}\n                            alt={item.product.title}\n                            className=\"h-full w-full object-cover object-center\"\n                          />\n                        </div>\n\n                        <div className=\"ml-4 flex flex-1 flex-col\">\n                          <div>\n                            <div className=\"flex justify-between text-base font-medium text-gray-900\">\n                              <h3>\n                                <a href={item.product.id}>\n                                  {item.product.title}\n                                </a>\n                              </h3>\n                              <p className=\"ml-4\">\n                                Rs. {item.product.discountPrice}\n                              </p>\n                            </div>\n                            <p className=\"mt-1 text-sm text-gray-500\">\n                              {item.product.brand}\n                            </p>\n                          </div>\n                          <div className=\"flex flex-1 items-end justify-between text-sm\">\n                            <div className=\"text-gray-500\">\n                              <label\n                                htmlFor=\"quantity\"\n                                className=\"inline mr-5 text-sm font-medium leading-6 text-gray-900\"\n                              >\n                                Qty\n                              </label>\n                              <select\n                                onChange={(e) => handleQuantity(e, item)}\n                                value={item.quantity}\n                              >\n                                <option value=\"1\">1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                              </select>\n                            </div>\n\n                            <div className=\"flex\">\n                              <button\n                                onClick={(e) => handleRemove(e, item.id)}\n                                type=\"button\"\n                                className=\"font-medium text-indigo-600 hover:text-indigo-500\"\n                              >\n                                Remove\n                              </button>\n                            </div>\n                          </div>\n                        </div>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n\n              <div className=\"border-t border-gray-200 px-2 py-6 sm:px-2\">\n                <div className=\"flex justify-between my-2 text-base font-medium text-gray-900\">\n                  <p>Subtotal</p>\n                  <p>Rs. {totalAmount}</p>\n                </div>\n                <div className=\"flex justify-between my-2 text-base font-medium text-gray-900\">\n                  <p>Total Items in Cart</p>\n                  <p>{totalItems} items</p>\n                </div>\n                <p className=\"mt-0.5 text-sm text-gray-500\">\n                  Shipping and taxes calculated at checkout.\n                </p>\n                <div className=\"mt-6\">\n                  <div\n                    onClick={handleOrder}\n                    className=\"flex cursor-pointer items-center justify-center rounded-md border border-transparent bg-indigo-600 px-6 py-3 text-base font-medium text-white shadow-sm hover:bg-indigo-700\"\n                  >\n                    Order Now\n                  </div>\n                </div>\n                <div className=\"mt-6 flex justify-center text-center text-sm text-gray-500\">\n                  <p>\n                    or\n                    <Link to=\"/\">\n                      <button\n                        type=\"button\"\n                        className=\"font-medium text-indigo-600 hover:text-indigo-500\"\n                      >\n                        Continue Shopping\n                        <span aria-hidden=\"true\"> &rarr;</span>\n                      </button>\n                    </Link>\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>}\n    </>\n  );\n}\n\nexport default Checkout;\n","/home/hyphen/MERN-ecommerce-Frontend/src/pages/CartPage.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/pages/404.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/pages/SignupPage.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/pages/LoginPage.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/pages/Home.js",["308"],[],"import { Link } from \"react-router-dom\";\nimport NavBar from \"../features/navbar/Navbar\";\nimport ProductList from \"../features/product/components/ProductList\";\nimport Footer from \"../features/common/Footer\";\n\nfunction Home() {\n    return ( \n        <div>\n            <NavBar>\n                <ProductList></ProductList>\n            </NavBar>\n            <Footer></Footer>\n        </div>\n     );\n}\n\nexport default Home;","/home/hyphen/MERN-ecommerce-Frontend/src/pages/StripeCheckout.js",["309"],[],"import React, { useState, useEffect } from \"react\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { Elements } from \"@stripe/react-stripe-js\";\nimport { useSelector } from 'react-redux';\n\nimport CheckoutForm from \"./CheckoutForm\";\nimport \"../Stripe.css\";\nimport { selectCurrentOrder } from \"../features/order/orderSlice\";\n\n// Make sure to call loadStripe outside of a component’s render to avoid\n// recreating the Stripe object on every render.\n// This is your test publishable API key.\nconst stripePromise = loadStripe(\"pk_test_51N5NLVSF2Mo4AGVvYGMMNnTcPA5lHrkUv8zPymsKfL31c8m6et8525Y92zMgA22m1u6ZkkXsBofre0PJL6i3eVsh00sR6M8c00\");\n\nexport default function StripeCheckout() {\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const currentOrder = useSelector(selectCurrentOrder)\n\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    fetch(\"/create-payment-intent\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ totalAmount: currentOrder.totalAmount, orderId:currentOrder.id }),\n    \n    })\n      .then((res) => res.json())\n      .then((data) => setClientSecret(data.clientSecret));\n  }, []);\n\n  const appearance = {\n    theme: 'stripe',\n  };\n  const options = {\n    clientSecret,\n    appearance,\n  };\n\n  return (\n    <div className=\"Stripe\">\n      {clientSecret && (\n        <Elements options={options} stripe={stripePromise}>\n          <CheckoutForm />\n        </Elements>\n      )}\n    </div>\n  );\n}","/home/hyphen/MERN-ecommerce-Frontend/src/pages/AdminOrdersPage.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/pages/ResetPasswordPage.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/features/counter/Counter.js",["310","311","312","313","314"],[],"import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  increment,\n  incrementAsync,\n  selectCount,\n} from './counterSlice';\n\nexport default function Counter() {\n  const count = useSelector(selectCount);\n  const dispatch = useDispatch();\n\n\n  return (\n    <div>\n      <div>\n      \n       \n      </div>\n    </div>\n  );\n}\n","/home/hyphen/MERN-ecommerce-Frontend/src/features/cart/cartSlice.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/features/auth/authSlice.js",["315"],[],"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport {\n  loginUser,\n  createUser,\n  signOut,\n  checkAuth,\n  resetPasswordRequest,\n  resetPassword,\n} from './authAPI';\nimport { updateUser } from '../user/userAPI';\n\nconst initialState = {\n  loggedInUserToken: null, // this should only contain user identity => 'id'/'role'\n  status: 'idle',\n  error: null,\n  userChecked: false,\n  mailSent: false,\n  passwordReset:false\n};\n\nexport const createUserAsync = createAsyncThunk(\n  'user/createUser',\n  async (userData) => {\n    const response = await createUser(userData);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const loginUserAsync = createAsyncThunk(\n  'user/loginUser',\n  async (loginInfo, { rejectWithValue }) => {\n    try {\n      const response = await loginUser(loginInfo);\n      return response.data;\n    } catch (error) {\n      console.log(error);\n      return rejectWithValue(error);\n    }\n  }\n);\n\nexport const checkAuthAsync = createAsyncThunk('user/checkAuth', async () => {\n  try {\n    const response = await checkAuth();\n    return response.data;\n  } catch (error) {\n    console.log(error);\n  }\n});\nexport const resetPasswordRequestAsync = createAsyncThunk(\n  'user/resetPasswordRequest',\n  async (email,{rejectWithValue}) => {\n    try {\n      const response = await resetPasswordRequest(email);\n      return response.data;\n    } catch (error) {\n      console.log(error);\n      return rejectWithValue(error);\n\n    }\n  }\n);\n\nexport const resetPasswordAsync = createAsyncThunk(\n  'user/resetPassword',\n  async (data,{rejectWithValue}) => {\n    try {\n      const response = await resetPassword(data);\n      console.log(response);\n      return response.data;\n    } catch (error) {\n      console.log(error);\n      return rejectWithValue(error);\n\n    }\n  }\n);\n\nexport const signOutAsync = createAsyncThunk(\n  'user/signOut',\n  async () => {\n    const response = await signOut();\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const authSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(createUserAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(createUserAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.loggedInUserToken = action.payload;\n      })\n      .addCase(loginUserAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(loginUserAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.loggedInUserToken = action.payload;\n      })\n      .addCase(loginUserAsync.rejected, (state, action) => {\n        state.status = 'idle';\n        state.error = action.payload;\n      })\n      .addCase(signOutAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(signOutAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.loggedInUserToken = null;\n      })\n      .addCase(checkAuthAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(checkAuthAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.loggedInUserToken = action.payload;\n        state.userChecked = true;\n      })\n      .addCase(checkAuthAsync.rejected, (state, action) => {\n        state.status = 'idle';\n        state.userChecked = true;\n      })\n      .addCase(resetPasswordRequestAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(resetPasswordRequestAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.mailSent = true;\n      })\n      .addCase(resetPasswordAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(resetPasswordAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.passwordReset = true;\n      })\n      .addCase(resetPasswordAsync.rejected, (state, action) => {\n        state.status = 'idle';\n        state.error = action.payload\n      })\n  },\n});\n\nexport const selectLoggedInUser = (state) => state.auth.loggedInUserToken;\nexport const selectError = (state) => state.auth.error;\nexport const selectUserChecked = (state) => state.auth.userChecked;\nexport const selectMailSent = (state) => state.auth.mailSent;\nexport const selectPasswordReset = (state) => state.auth.passwordReset;\n\n// export const { } = authSlice.actions;\n\nexport default authSlice.reducer;\n","/home/hyphen/MERN-ecommerce-Frontend/src/features/user/userSlice.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/features/auth/components/Protected.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/features/auth/components/ProtectedAdmin.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/features/auth/components/Logout.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/features/product/productSlice.js",["316"],[],"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport {\n  fetchAllProducts,\n  fetchProductsByFilters,\n  fetchBrands,\n  fetchCategories,\n  fetchProductById,\n  createProduct,\n  updateProduct,\n} from './productAPI';\n\nconst initialState = {\n  products: [],\n  brands: [],\n  categories: [],\n  status: 'idle',\n  totalItems: 0,\n  selectedProduct: null,\n};\n\n\nexport const fetchProductByIdAsync = createAsyncThunk(\n  'product/fetchProductById',\n  async (id) => {\n    const response = await fetchProductById(id);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const fetchProductsByFiltersAsync = createAsyncThunk(\n  'product/fetchProductsByFilters',\n  async ({ filter, sort, pagination, admin }) => {\n    const response = await fetchProductsByFilters(filter, sort, pagination, admin);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const fetchBrandsAsync = createAsyncThunk(\n  'product/fetchBrands',\n  async () => {\n    const response = await fetchBrands();\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\nexport const fetchCategoriesAsync = createAsyncThunk(\n  'product/fetchCategories',\n  async () => {\n    const response = await fetchCategories();\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const createProductAsync = createAsyncThunk(\n  'product/create',\n  async (product) => {\n    const response = await createProduct(product);\n    return response.data;\n  }\n);\n\nexport const updateProductAsync = createAsyncThunk(\n  'product/update',\n  async (update) => {\n    const response = await updateProduct(update);\n    return response.data;\n  }\n);\n\nexport const productSlice = createSlice({\n  name: 'product',\n  initialState,\n  reducers: {\n    clearSelectedProduct:(state)=>{\n      state.selectedProduct = null\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchProductsByFiltersAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchProductsByFiltersAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.products = action.payload.products;\n        state.totalItems = action.payload.totalItems;\n      })\n      .addCase(fetchBrandsAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchBrandsAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.brands = action.payload;\n      })\n      .addCase(fetchCategoriesAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchCategoriesAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.categories = action.payload;\n      })\n      .addCase(fetchProductByIdAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchProductByIdAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.selectedProduct = action.payload;\n      })\n      .addCase(createProductAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(createProductAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.products.push(action.payload);\n      })\n      .addCase(updateProductAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(updateProductAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        const index = state.products.findIndex(\n          (product) => product.id === action.payload.id\n        );\n        state.products[index] = action.payload;\n        state.selectedProduct = action.payload;\n\n      });\n  },\n});\n\nexport const { clearSelectedProduct } = productSlice.actions;\n\nexport const selectAllProducts = (state) => state.product.products;\nexport const selectBrands = (state) => state.product.brands;\nexport const selectCategories = (state) => state.product.categories;\nexport const selectProductById = (state) => state.product.selectedProduct;\nexport const selectProductListStatus = (state) => state.product.status;\n\nexport const selectTotalItems = (state) => state.product.totalItems;\n\nexport default productSlice.reducer;\n","/home/hyphen/MERN-ecommerce-Frontend/src/features/order/orderSlice.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/features/cart/Cart.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/features/auth/components/Login.js",["317","318"],[],"import { useSelector, useDispatch } from 'react-redux';\nimport { selectError, selectLoggedInUser } from '../authSlice';\nimport { Link, Navigate } from 'react-router-dom';\nimport { loginUserAsync } from '../authSlice';\nimport { useForm } from 'react-hook-form';\n\nexport default function Login() {\n  const dispatch = useDispatch();\n  const error = useSelector(selectError);\n  const user = useSelector(selectLoggedInUser);\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n\n\n  return (\n    <>\n      {user && <Navigate to=\"/\" replace={true}></Navigate>}\n      <div className=\"flex min-h-full flex-1 flex-col justify-center px-6 py-12 lg:px-8\">\n        <div className=\"sm:mx-auto sm:w-full sm:max-w-sm\">\n          <img\n            className=\"mx-auto h-10 w-auto\"\n            src=\"/ecommerce.png\"\n            alt=\"Your Company\"\n          />\n          <h2 className=\"mt-10 text-center text-2xl font-bold leading-9 tracking-tight text-gray-900\">\n            Log in to your account\n          </h2>\n        </div>\n\n        <div className=\"mt-10 sm:mx-auto sm:w-full sm:max-w-sm\">\n          <form\n            noValidate\n            onSubmit={handleSubmit((data) => {\n              dispatch(\n                loginUserAsync({ email: data.email, password: data.password })\n              );\n            })}\n            className=\"space-y-6\"\n          >\n            <div>\n              <label\n                htmlFor=\"email\"\n                className=\"block text-sm font-medium leading-6 text-gray-900\"\n              >\n                Email address\n              </label>\n              <div className=\"mt-2\">\n                <input\n                  id=\"email\"\n                  {...register('email', {\n                    required: 'email is required',\n                    pattern: {\n                      value: /\\b[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,4}\\b/gi,\n                      message: 'email not valid',\n                    },\n                  })}\n                  type=\"email\"\n                  className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\n                />\n                {errors.email && (\n                  <p className=\"text-red-500\">{errors.email.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <div className=\"flex items-center justify-between\">\n                <label\n                  htmlFor=\"password\"\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\n                >\n                  Password\n                </label>\n                <div className=\"text-sm\">\n                  <Link\n                    to=\"/forgot-password\"\n                    className=\"font-semibold text-indigo-600 hover:text-indigo-500\"\n                  >\n                    Forgot password?\n                  </Link>\n                </div>\n              </div>\n              <div className=\"mt-2\">\n                <input\n                  id=\"password\"\n                  {...register('password', {\n                    required: 'password is required',\n                  })}\n                  type=\"password\"\n                  className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\n                />\n                {errors.password && (\n                  <p className=\"text-red-500\">{errors.password.message}</p>\n                )}\n              </div>\n              {error && <p className=\"text-red-500\">{error || error.message}</p>}\n            </div>\n\n            <div>\n              <button\n                type=\"submit\"\n                className=\"flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n              >\n                Log in\n              </button>\n            </div>\n          </form>\n\n          <p className=\"mt-10 text-center text-sm text-gray-500\">\n            Not a member?{' '}\n            <Link\n              to=\"/signup\"\n              className=\"font-semibold leading-6 text-indigo-600 hover:text-indigo-500\"\n            >\n              Create an Account\n            </Link>\n          </p>\n        </div>\n      </div>\n    </>\n  );\n}\n","/home/hyphen/MERN-ecommerce-Frontend/src/features/auth/components/ForgotPassword.js",["319","320"],[],"import { Link } from 'react-router-dom';\nimport { useForm } from 'react-hook-form';\nimport {useDispatch, useSelector} from 'react-redux';\nimport { resetPasswordRequestAsync, selectMailSent } from '../authSlice';\n\nexport default function ForgotPassword() {\n\n const mailSent = useSelector(selectMailSent);\n  const dispatch = useDispatch()\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n\n  console.log(errors);\n\n  return (\n    <>\n      <div className=\"flex min-h-full flex-1 flex-col justify-center px-6 py-12 lg:px-8\">\n        <div className=\"sm:mx-auto sm:w-full sm:max-w-sm\">\n          <img\n            className=\"mx-auto h-10 w-auto\"\n            src=\"/ecommerce.png\"\n            alt=\"Your Company\"\n          />\n          <h2 className=\"mt-10 text-center text-2xl font-bold leading-9 tracking-tight text-gray-900\">\n            Enter email to reset password\n          </h2>\n        </div>\n\n        <div className=\"mt-10 sm:mx-auto sm:w-full sm:max-w-sm\">\n          <form\n            noValidate\n            onSubmit={handleSubmit((data) => {\n              console.log(data);\n              dispatch(resetPasswordRequestAsync(data.email))\n              \n            })}\n            className=\"space-y-6\"\n          >\n            <div>\n              <label\n                htmlFor=\"email\"\n                className=\"block text-sm font-medium leading-6 text-gray-900\"\n              >\n                Email address\n              </label>\n              <div className=\"mt-2\">\n                <input\n                  id=\"email\"\n                  {...register('email', {\n                    required: 'email is required',\n                    pattern: {\n                      value: /\\b[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,4}\\b/gi,\n                      message: 'email not valid',\n                    },\n                  })}\n                  type=\"email\"\n                  className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\n                />\n                {errors.email && (\n                  <p className=\"text-red-500\">{errors.email.message}</p>\n                )}\n                {mailSent && (\n                  <p className=\"text-green-500\">Mail Sent</p>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <button\n                type=\"submit\"\n                className=\"flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n              >\n                Send Email\n              </button>\n            </div>\n          </form>\n\n          <p className=\"mt-10 text-center text-sm text-gray-500\">\n            Send me back to{' '}\n            <Link\n              to=\"/login\"\n              className=\"font-semibold leading-6 text-indigo-600 hover:text-indigo-500\"\n            >\n              Login\n            </Link>\n          </p>\n        </div>\n      </div>\n    </>\n  );\n}\n","/home/hyphen/MERN-ecommerce-Frontend/src/features/auth/components/Signup.js",["321","322"],[],"import { useSelector, useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\n\nimport { selectLoggedInUser, createUserAsync } from '../authSlice';\nimport { Link } from 'react-router-dom';\nimport { Navigate } from 'react-router-dom';\n\nexport default function Signup() {\n  const dispatch = useDispatch();\n  const user = useSelector(selectLoggedInUser);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n\n\n  return (\n    <>\n      {user && <Navigate to=\"/\" replace={true}></Navigate>}\n      <div className=\"flex min-h-full flex-1 flex-col justify-center px-6 py-12 lg:px-8\">\n        <div className=\"sm:mx-auto sm:w-full sm:max-w-sm\">\n          <img\n            className=\"mx-auto h-10 w-auto\"\n            src=\"/ecommerce.png\"\n            alt=\"Your Company\"\n          />\n          <h2 className=\"mt-10 text-center text-2xl font-bold leading-9 tracking-tight text-gray-900\">\n            Create a New Account\n          </h2>\n        </div>\n\n        <div className=\"mt-10 sm:mx-auto sm:w-full sm:max-w-sm\">\n          <form\n            noValidate\n            className=\"space-y-6\"\n            onSubmit={handleSubmit((data) => {\n              dispatch(\n                createUserAsync({\n                  email: data.email,\n                  password: data.password,\n                  addresses: [],\n                  role:'user'\n                })\n              );\n              console.log(data);\n            })}\n          >\n            <div>\n              <label\n                htmlFor=\"email\"\n                className=\"block text-sm font-medium leading-6 text-gray-900\"\n              >\n                Email address\n              </label>\n              <div className=\"mt-2\">\n                <input\n                  id=\"email\"\n                  {...register('email', {\n                    required: 'email is required',\n                    pattern: {\n                      value: /\\b[\\w\\.-]+@[\\w\\.-]+\\.\\w{2,4}\\b/gi,\n                      message: 'email not valid',\n                    },\n                  })}\n                  type=\"email\"\n                  className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\n                />\n                {errors.email && (\n                  <p className=\"text-red-500\">{errors.email.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <div className=\"flex items-center justify-between\">\n                <label\n                  htmlFor=\"password\"\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\n                >\n                  Password\n                </label>\n              </div>\n              <div className=\"mt-2\">\n                <input\n                  id=\"password\"\n                  {...register('password', {\n                    required: 'password is required',\n                    pattern: {\n                      value:\n                        /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/gm,\n                      message: `- at least 8 characters\\n\n                      - must contain at least 1 uppercase letter, 1 lowercase letter, and 1 number\\n\n                      - Can contain special characters`,\n                    },\n                  })}\n                  type=\"password\"\n                  className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\n                />\n                {errors.password && (\n                  <p className=\"text-red-500\">{errors.password.message}</p>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <div className=\"flex items-center justify-between\">\n                <label\n                  htmlFor=\"password\"\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\n                >\n                  Confirm Password\n                </label>\n              </div>\n              <div className=\"mt-2\">\n                <input\n                  id=\"confirmPassword\"\n                  {...register('confirmPassword', {\n                    required: 'confirm password is required',\n                    validate: (value, formValues) =>\n                      value === formValues.password || 'password not matching',\n                  })}\n                  type=\"password\"\n                  className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\n                />\n                {errors.confirmPassword && (\n                  <p className=\"text-red-500\">\n                    {errors.confirmPassword.message}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <button\n                type=\"submit\"\n                className=\"flex w-full justify-center rounded-md bg-indigo-600 px-3 py-1.5 text-sm font-semibold leading-6 text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n              >\n                Sign Up\n              </button>\n            </div>\n          </form>\n\n          <p className=\"mt-10 text-center text-sm text-gray-500\">\n            Already a Member?{' '}\n            <Link\n              to=\"/login\"\n              className=\"font-semibold leading-6 text-indigo-600 hover:text-indigo-500\"\n            >\n              Log In\n            </Link>\n          </p>\n        </div>\n      </div>\n    </>\n  );\n}\n","/home/hyphen/MERN-ecommerce-Frontend/src/pages/CheckoutForm.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/features/auth/components/ResetPassword.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/features/common/Footer.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/features/navbar/Navbar.js",["323"],[],"import { Fragment } from 'react';\nimport { Disclosure, Menu, Transition } from '@headlessui/react';\nimport {\n  Bars3Icon,\n  ShoppingCartIcon,\n  XMarkIcon,\n} from '@heroicons/react/24/outline';\nimport { Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { selectItems } from '../cart/cartSlice';\nimport { selectLoggedInUser } from '../auth/authSlice';\nimport { selectUserInfo } from '../user/userSlice';\n\n\nconst navigation = [\n  { name: 'Products', link: '/', user: true },\n  { name: 'Products', link: '/admin', admin: true },\n  { name: 'Orders', link: '/admin/orders', admin: true },\n\n];\nconst userNavigation = [\n  { name: 'My Profile', link: '/profile' },\n  { name: 'My Orders', link: '/my-orders' },\n  { name: 'Sign out', link: '/logout' },\n];\n\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(' ');\n}\n\nfunction NavBar({ children }) {\n  const items = useSelector(selectItems);\n  const userInfo = useSelector(selectUserInfo);\n\n  return (\n    <>\n      {userInfo &&<div className=\"min-h-full\">\n        <Disclosure as=\"nav\" className=\"bg-gray-800\">\n          {({ open }) => (\n            <>\n              <div className=\"mx-auto max-w-8xl px-4 sm:px-6 lg:px-8\">\n                <div className=\"flex h-16 items-center justify-between\">\n                  <div className=\"flex items-center\">\n                    <div className=\"flex-shrink-0\">\n                      <Link to=\"/\">\n                        <img\n                          className=\"h-8 w-8\"\n                          src=\"/ecommerce.png\"\n                          alt=\"Your Company\"\n                        />\n                      </Link>\n                    </div>\n                    <div className=\"hidden md:block\">\n                      <div className=\"ml-10 flex items-baseline space-x-4\">\n                        {navigation.map((item) =>\n                          item[userInfo.role] ? (\n                            <Link\n                              key={item.name}\n                              to={item.link}\n                              className={classNames(\n                                item.current\n                                  ? 'bg-gray-900 text-white'\n                                  : 'text-gray-300 hover:bg-gray-700 hover:text-white',\n                                'rounded-md px-3 py-2 text-sm font-medium'\n                              )}\n                              aria-current={item.current ? 'page' : undefined}\n                            >\n                              {item.name}\n                            </Link>\n                          ) : null\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"hidden md:block\">\n                    <div className=\"ml-4 flex items-center md:ml-6\">\n                      <Link to=\"/cart\">\n                        <button\n                          type=\"button\"\n                          className=\"rounded-full bg-gray-800 p-1 text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800\"\n                        >\n                          <span className=\"sr-only\">View notifications</span>\n                          <ShoppingCartIcon\n                            className=\"h-6 w-6\"\n                            aria-hidden=\"true\"\n                          />\n                        </button>\n                      </Link>\n                      {items.length > 0 && (\n                        <span className=\"inline-flex items-center rounded-md mb-7 -ml-3 bg-red-50 px-2 py-1 text-xs font-medium text-red-700 ring-1 ring-inset ring-red-600/10\">\n                          {items.length}\n                        </span>\n                      )}\n\n                      {/* Profile dropdown */}\n                      <Menu as=\"div\" className=\"relative ml-3\">\n                        <div>\n                          <Menu.Button className=\"flex max-w-xs items-center rounded-full bg-gray-800 text-sm focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800\">\n                            <span className=\"sr-only\">Open user menu</span>\n                            <img\n                              className=\"h-8 w-8 rounded-full\"\n                              src={userInfo.imageUrl}\n                              alt=\"\"\n                            />\n                          </Menu.Button>\n                        </div>\n                        <Transition\n                          as={Fragment}\n                          enter=\"transition ease-out duration-100\"\n                          enterFrom=\"transform opacity-0 scale-95\"\n                          enterTo=\"transform opacity-100 scale-100\"\n                          leave=\"transition ease-in duration-75\"\n                          leaveFrom=\"transform opacity-100 scale-100\"\n                          leaveTo=\"transform opacity-0 scale-95\"\n                        >\n                          <Menu.Items className=\"absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none\">\n                            {userNavigation.map((item) => (\n                              <Menu.Item key={item.name}>\n                                {({ active }) => (\n                                  <Link\n                                    to={item.link}\n                                    className={classNames(\n                                      active ? 'bg-gray-100' : '',\n                                      'block px-4 py-2 text-sm text-gray-700'\n                                    )}\n                                  >\n                                    {item.name}\n                                  </Link>\n                                )}\n                              </Menu.Item>\n                            ))}\n                          </Menu.Items>\n                        </Transition>\n                      </Menu>\n                    </div>\n                  </div>\n                  <div className=\"-mr-2 flex md:hidden\">\n                    {/* Mobile menu button */}\n                    <Disclosure.Button className=\"inline-flex items-center justify-center rounded-md bg-gray-800 p-2 text-gray-400 hover:bg-gray-700 hover:text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800\">\n                      <span className=\"sr-only\">Open main menu</span>\n                      {open ? (\n                        <XMarkIcon\n                          className=\"block h-6 w-6\"\n                          aria-hidden=\"true\"\n                        />\n                      ) : (\n                        <Bars3Icon\n                          className=\"block h-6 w-6\"\n                          aria-hidden=\"true\"\n                        />\n                      )}\n                    </Disclosure.Button>\n                  </div>\n                </div>\n              </div>\n\n              <Disclosure.Panel className=\"md:hidden\">\n                <div className=\"space-y-1 px-2 pb-3 pt-2 sm:px-3\">\n                  {navigation.map((item) => (\n                    <Disclosure.Button\n                      key={item.name}\n                      as=\"a\"\n                      href={item.link}\n                      className={classNames(\n                        item.current\n                          ? 'bg-gray-900 text-white'\n                          : 'text-gray-300 hover:bg-gray-700 hover:text-white',\n                        'block rounded-md px-3 py-2 text-base font-medium'\n                      )}\n                      aria-current={item.current ? 'page' : undefined}\n                    >\n                      {item.name}\n                    </Disclosure.Button>\n                  ))}\n                </div>\n                <div className=\"border-t border-gray-700 pb-3 pt-4\">\n                  <div className=\"flex items-center px-5\">\n                    <div className=\"flex-shrink-0\">\n                      <img\n                        className=\"h-10 w-10 rounded-full\"\n                        src={userInfo.imageUrl}\n                        alt=\"\"\n                      />\n                    </div>\n                    <div className=\"ml-3\">\n                      <div className=\"text-base font-medium leading-none text-white\">\n                        {/* this should come from userInfo */}\n                        {userInfo.name}\n                      </div>\n                      <div className=\"text-sm font-medium leading-none text-gray-400\">\n                        {userInfo.email}\n                      </div>\n                    </div>\n                    <Link to=\"/cart\">\n                      <button\n                        type=\"button\"\n                        className=\"ml-auto flex-shrink-0 rounded-full bg-gray-800 p-1 text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-gray-800\"\n                      >\n                        <ShoppingCartIcon\n                          className=\"h-6 w-6\"\n                          aria-hidden=\"true\"\n                        />\n                      </button>\n                    </Link>\n                    {items.length > 0 && (\n                      <span className=\"inline-flex items-center rounded-md bg-red-50 mb-7 -ml-3 px-2 py-1 text-xs font-medium text-red-700 ring-1 ring-inset ring-red-600/10\">\n                        {items.length}\n                      </span>\n                    )}\n                  </div>\n                  <div className=\"mt-3 space-y-1 px-2\">\n                    {userNavigation.map((item) => (\n                      <Disclosure.Button\n                        key={item.name}\n                        as=\"a\"\n                        href={item.link}\n                        className=\"block rounded-md px-3 py-2 text-base font-medium text-gray-400 hover:bg-gray-700 hover:text-white\"\n                      >\n                        {item.name}\n                      </Disclosure.Button>\n                    ))}\n                  </div>\n                </div>\n              </Disclosure.Panel>\n            </>\n          )}\n        </Disclosure>\n\n        <header className=\"bg-white shadow\">\n          <div className=\"mx-auto max-w-7xl px-4 py-6 sm:px-6 lg:px-8\">\n            <h1 className=\"text-xl font-bold tracking-tight text-gray-900\">\n              Welcome to PLK\n            </h1>\n          </div>\n        </header>\n        <main>\n          <div className=\"mx-auto max-w-7xl py-6 sm:px-6 lg:px-8\">\n            {children}\n          </div>\n        </main>\n      </div>}\n    </>\n  );\n}\n\nexport default NavBar;\n","/home/hyphen/MERN-ecommerce-Frontend/src/features/product/components/ProductDetail.js",["324","325","326","327"],[],"import { useState, useEffect } from 'react';\nimport { StarIcon } from '@heroicons/react/20/solid';\nimport { RadioGroup } from '@headlessui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  fetchProductByIdAsync,\n  selectProductById,\n  selectProductListStatus,\n} from '../productSlice';\nimport { useParams } from 'react-router-dom';\nimport { addToCartAsync, selectItems } from '../../cart/cartSlice';\nimport { selectLoggedInUser } from '../../auth/authSlice';\nimport { useAlert } from 'react-alert';\nimport { Grid } from 'react-loader-spinner';\n\n\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(' ');\n}\n\n\nexport default function ProductDetail() {\n  const [selectedColor, setSelectedColor] = useState();\n  const [selectedSize, setSelectedSize] = useState();\n  const items = useSelector(selectItems);\n  const product = useSelector(selectProductById);\n  const dispatch = useDispatch();\n  const params = useParams();\n  const alert = useAlert();\n  const status = useSelector(selectProductListStatus);\n\n  const handleCart = (e) => {\n    e.preventDefault();\n    if (items.findIndex((item) => item.product.id === product.id) < 0) {\n      console.log({ items, product });\n      const newItem = {\n        product: product.id,\n        quantity: 1,\n      };\n      if (selectedColor) {\n        newItem.color = selectedColor;\n      }\n      if (selectedSize) {\n        newItem.size = selectedSize;\n      }\n      dispatch(addToCartAsync({item:newItem, alert}));\n    } else {\n      alert.error('Item Already added');\n    }\n  };\n\n  useEffect(() => {\n    dispatch(fetchProductByIdAsync(params.id));\n  }, [dispatch, params.id]);\n\n  return (\n    <div className=\"bg-white\">\n      {status === 'loading' ? (\n        <Grid\n          height=\"80\"\n          width=\"80\"\n          color=\"rgb(79, 70, 229) \"\n          ariaLabel=\"grid-loading\"\n          radius=\"12.5\"\n          wrapperStyle={{}}\n          wrapperClass=\"\"\n          visible={true}\n        />\n      ) : null}\n      {product && (\n        <div className=\"pt-6\">\n          <nav aria-label=\"Breadcrumb\">\n            <ol className=\"mx-auto flex max-w-2xl items-center space-x-2 px-4 sm:px-6 lg:max-w-7xl lg:px-8\">\n              {product.breadcrumbs &&\n                product.breadcrumbs.map((breadcrumb) => (\n                  <li key={breadcrumb.id}>\n                    <div className=\"flex items-center\">\n                      <a\n                        href={breadcrumb.href}\n                        className=\"mr-2 text-sm font-medium text-gray-900\"\n                      >\n                        {breadcrumb.name}\n                      </a>\n                      <svg\n                        width={16}\n                        height={20}\n                        viewBox=\"0 0 16 20\"\n                        fill=\"currentColor\"\n                        aria-hidden=\"true\"\n                        className=\"h-5 w-4 text-gray-300\"\n                      >\n                        <path d=\"M5.697 4.34L8.98 16.532h1.327L7.025 4.341H5.697z\" />\n                      </svg>\n                    </div>\n                  </li>\n                ))}\n              <li className=\"text-sm\">\n                <a\n                  href={product.href}\n                  aria-current=\"page\"\n                  className=\"font-medium text-gray-500 hover:text-gray-600\"\n                >\n                  {product.title}\n                </a>\n              </li>\n            </ol>\n          </nav>\n\n          {/* Image gallery */}\n          <div className=\"mx-auto mt-6 max-w-2xl sm:px-6 lg:grid lg:max-w-7xl lg:grid-cols-3 lg:gap-x-8 lg:px-8\">\n            <div className=\"aspect-h-4 aspect-w-3 hidden overflow-hidden rounded-lg lg:block\">\n              <img\n                src={product.images[0]}\n                alt={product.title}\n                className=\"h-full w-full object-cover object-center\"\n              />\n            </div>\n            <div className=\"hidden lg:grid lg:grid-cols-1 lg:gap-y-8\">\n              <div className=\"aspect-h-2 aspect-w-3 overflow-hidden rounded-lg\">\n                <img\n                  src={product.images[1]}\n                  alt={product.title}\n                  className=\"h-full w-full object-cover object-center\"\n                />\n              </div>\n              <div className=\"aspect-h-2 aspect-w-3 overflow-hidden rounded-lg\">\n                <img\n                  src={product.images[2]}\n                  alt={product.title}\n                  className=\"h-full w-full object-cover object-center\"\n                />\n              </div>\n            </div>\n            <div className=\"aspect-h-5 aspect-w-4 lg:aspect-h-4 lg:aspect-w-3 sm:overflow-hidden sm:rounded-lg\">\n              <img\n                src={product.images[3]}\n                alt={product.title}\n                className=\"h-full w-full object-cover object-center\"\n              />\n            </div>\n          </div>\n\n          {/* Product info */}\n          <div className=\"mx-auto max-w-2xl px-4 pb-16 pt-10 sm:px-6 lg:grid lg:max-w-7xl lg:grid-cols-3 lg:grid-rows-[auto,auto,1fr] lg:gap-x-8 lg:px-8 lg:pb-24 lg:pt-16\">\n            <div className=\"lg:col-span-2 lg:border-r lg:border-gray-200 lg:pr-8\">\n              <h1 className=\"text-2xl font-bold tracking-tight text-gray-900 sm:text-3xl\">\n                {product.title}\n              </h1>\n            </div>\n\n            {/* Options */}\n            <div className=\"mt-4 lg:row-span-3 lg:mt-0\">\n              <h2 className=\"sr-only\">Product information</h2>\n              <p className=\"text-xl line-through tracking-tight text-gray-900\">\n                Rs. {product.price}\n              </p>\n              <p className=\"text-3xl tracking-tight text-gray-900\">\n                Rs. {product.discountPrice}\n              </p>\n\n              {/* Reviews */}\n{/*              <div className=\"mt-6\">\n                <h3 className=\"sr-only\">Reviews</h3>\n                <div className=\"flex items-center\">\n                  <div className=\"flex items-center\">\n                    {[0, 1, 2, 3, 4].map((rating) => (\n                      <StarIcon\n                        key={rating}\n                        className={classNames(\n                          product.rating > rating\n                            ? 'text-gray-900'\n                            : 'text-gray-200',\n                          'h-5 w-5 flex-shrink-0'\n                        )}\n                        aria-hidden=\"true\"\n                      />\n                    ))}\n                  </div>\n                  <p className=\"sr-only\">{product.rating} out of 5 stars</p>\n                </div>\n              </div>\n\n*/}              <form className=\"mt-10\">\n                {/* Colors */}\n                {product.colors && product.colors.length > 0 && (\n                  <div>\n                    <h3 className=\"text-sm font-medium text-gray-900\">Color</h3>\n\n                    <RadioGroup\n                      value={selectedColor}\n                      onChange={setSelectedColor}\n                      className=\"mt-4\"\n                    >\n                      <RadioGroup.Label className=\"sr-only\">\n                        Choose a color\n                      </RadioGroup.Label>\n                      <div className=\"flex items-center space-x-3\">\n                        {product.colors.map((color) => (\n                          <RadioGroup.Option\n                            key={color.name}\n                            value={color}\n                            className={({ active, checked }) =>\n                              classNames(\n                                color.selectedClass,\n                                active && checked ? 'ring ring-offset-1' : '',\n                                !active && checked ? 'ring-2' : '',\n                                'relative -m-0.5 flex cursor-pointer items-center justify-center rounded-full p-0.5 focus:outline-none'\n                              )\n                            }\n                          >\n                            <RadioGroup.Label as=\"span\" className=\"sr-only\">\n                              {color.name}\n                            </RadioGroup.Label>\n                            <span\n                              aria-hidden=\"true\"\n                              className={classNames(\n                                color.class,\n                                'h-8 w-8 rounded-full border border-black border-opacity-10'\n                              )}\n                            />\n                          </RadioGroup.Option>\n                        ))}\n                      </div>\n                    </RadioGroup>\n                  </div>\n                )}\n\n                {/* Sizes */}\n                {product.sizes && product.sizes.length > 0 && (\n                  <div className=\"mt-10\">\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className=\"text-sm font-medium text-gray-900\">\n                        Size\n                      </h3>\n                      <a\n                        href=\"#\"\n                        className=\"text-sm font-medium text-indigo-600 hover:text-indigo-500\"\n                      >\n                        Size guide\n                      </a>\n                    </div>\n\n                    <RadioGroup\n                      value={selectedSize}\n                      onChange={setSelectedSize}\n                      className=\"mt-4\"\n                    >\n                      <RadioGroup.Label className=\"sr-only\">\n                        Choose a size\n                      </RadioGroup.Label>\n                      <div className=\"grid grid-cols-4 gap-4 sm:grid-cols-8 lg:grid-cols-4\">\n                        {product.sizes.map((size) => (\n                          <RadioGroup.Option\n                            key={size.name}\n                            value={size}\n                            disabled={!size.inStock}\n                            className={({ active }) =>\n                              classNames(\n                                size.inStock\n                                  ? 'cursor-pointer bg-white text-gray-900 shadow-sm'\n                                  : 'cursor-not-allowed bg-gray-50 text-gray-200',\n                                active ? 'ring-2 ring-indigo-500' : '',\n                                'group relative flex items-center justify-center rounded-md border py-3 px-4 text-sm font-medium uppercase hover:bg-gray-50 focus:outline-none sm:flex-1 sm:py-6'\n                              )\n                            }\n                          >\n                            {({ active, checked }) => (\n                              <>\n                                <RadioGroup.Label as=\"span\">\n                                  {size.name}\n                                </RadioGroup.Label>\n                                {size.inStock ? (\n                                  <span\n                                    className={classNames(\n                                      active ? 'border' : 'border-2',\n                                      checked\n                                        ? 'border-indigo-500'\n                                        : 'border-transparent',\n                                      'pointer-events-none absolute -inset-px rounded-md'\n                                    )}\n                                    aria-hidden=\"true\"\n                                  />\n                                ) : (\n                                  <span\n                                    aria-hidden=\"true\"\n                                    className=\"pointer-events-none absolute -inset-px rounded-md border-2 border-gray-200\"\n                                  >\n                                    <svg\n                                      className=\"absolute inset-0 h-full w-full stroke-2 text-gray-200\"\n                                      viewBox=\"0 0 100 100\"\n                                      preserveAspectRatio=\"none\"\n                                      stroke=\"currentColor\"\n                                    >\n                                      <line\n                                        x1={0}\n                                        y1={100}\n                                        x2={100}\n                                        y2={0}\n                                        vectorEffect=\"non-scaling-stroke\"\n                                      />\n                                    </svg>\n                                  </span>\n                                )}\n                              </>\n                            )}\n                          </RadioGroup.Option>\n                        ))}\n                      </div>\n                    </RadioGroup>\n                  </div>\n                )}\n\n                <button\n                  onClick={handleCart}\n                  type=\"submit\"\n                  className=\"mt-10 flex w-full items-center justify-center rounded-md border border-transparent bg-indigo-600 px-8 py-3 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\n                >\n                  Add to Cart\n                </button>\n              </form>\n            </div>\n\n            <div className=\"py-10 lg:col-span-2 lg:col-start-1 lg:border-r lg:border-gray-200 lg:pb-16 lg:pr-8 lg:pt-6\">\n              {/* Description and details */}\n              <div>\n                <h3 className=\"sr-only\">Description</h3>\n\n                <div className=\"space-y-6\">\n                  <p className=\"text-base text-gray-900\">\n                    {product.description}\n                  </p>\n                </div>\n              </div>\n\n              {product.highlights && (\n                <div className=\"mt-10\">\n                  <h3 className=\"text-sm font-medium text-gray-900\">\n                    Terms & Conditions\n                  </h3>\n\n                  <div className=\"mt-4\">\n                    <ul\n                      role=\"list\"\n                      className=\"list-disc space-y-2 pl-4 text-sm\"\n                    >\n                      {product.highlights.map((highlight) => (\n                        <li key={highlight} className=\"text-gray-400\">\n                          <span className=\"text-gray-600\">{highlight}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              )}\n\n              <div className=\"mt-10\">\n                <h2 className=\"text-sm font-medium text-gray-900\">Details</h2>\n\n                <div className=\"mt-4 space-y-6\">\n                  <p className=\"text-sm text-gray-600\">{product.description}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","/home/hyphen/MERN-ecommerce-Frontend/src/features/product/components/ProductList.js",["328","329","330","331"],[],"import React, { useState, Fragment, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  fetchBrandsAsync,\n  fetchCategoriesAsync,\n  fetchProductsByFiltersAsync,\n  selectAllProducts,\n  selectBrands,\n  selectCategories,\n  selectProductListStatus,\n  selectTotalItems,\n} from '../productSlice';\nimport { Dialog, Disclosure, Menu, Transition } from '@headlessui/react';\nimport { XMarkIcon } from '@heroicons/react/24/outline';\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  StarIcon,\n} from '@heroicons/react/20/solid';\nimport { Link } from 'react-router-dom';\nimport {\n  ChevronDownIcon,\n  FunnelIcon,\n  MinusIcon,\n  PlusIcon,\n  Squares2X2Icon,\n} from '@heroicons/react/20/solid';\nimport { ITEMS_PER_PAGE } from '../../../app/constants';\nimport Pagination from '../../common/Pagination';\nimport { Grid } from 'react-loader-spinner';\n\nconst sortOptions = [\n  { name: 'Best Rating', sort: 'rating', order: 'desc', current: false },\n  { name: 'Price: Low to High', sort: 'discountPrice', order: 'asc', current: false },\n  { name: 'Price: High to Low', sort: 'discountPrice', order: 'desc', current: false },\n];\n\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(' ');\n}\n\nexport default function ProductList() {\n  const dispatch = useDispatch();\n  const products = useSelector(selectAllProducts);\n  const brands = useSelector(selectBrands);\n  const categories = useSelector(selectCategories);\n  const totalItems = useSelector(selectTotalItems);\n  const status = useSelector(selectProductListStatus);\n  const filters = [\n    {\n      id: 'category',\n      name: 'Category',\n      options: categories,\n    },\n    {\n      id: 'brand',\n      name: 'Brands',\n      options: brands,\n    },\n  ];\n\n  const [filter, setFilter] = useState({});\n  const [sort, setSort] = useState({});\n  const [mobileFiltersOpen, setMobileFiltersOpen] = useState(false);\n  const [page, setPage] = useState(1);\n\n  const handleFilter = (e, section, option) => {\n    console.log(e.target.checked);\n    const newFilter = { ...filter };\n    if (e.target.checked) {\n      if (newFilter[section.id]) {\n        newFilter[section.id].push(option.value);\n      } else {\n        newFilter[section.id] = [option.value];\n      }\n    } else {\n      const index = newFilter[section.id].findIndex(\n        (el) => el === option.value\n      );\n      newFilter[section.id].splice(index, 1);\n    }\n    console.log({ newFilter });\n\n    setFilter(newFilter);\n  };\n\n  const handleSort = (e, option) => {\n    const sort = { _sort: option.sort, _order: option.order };\n    console.log({ sort });\n    setSort(sort);\n  };\n\n  const handlePage = (page) => {\n    console.log({ page });\n    setPage(page);\n  };\n\n  useEffect(() => {\n    const pagination = { _page: page, _limit: ITEMS_PER_PAGE };\n    dispatch(fetchProductsByFiltersAsync({ filter, sort, pagination }));\n  }, [dispatch, filter, sort, page]);\n\n  useEffect(() => {\n    setPage(1);\n  }, [totalItems, sort]);\n\n  useEffect(() => {\n    dispatch(fetchBrandsAsync());\n    dispatch(fetchCategoriesAsync());\n  }, []);\n\n  return (\n    <div className=\"bg-white\">\n      <div>\n        <MobileFilter\n          handleFilter={handleFilter}\n          mobileFiltersOpen={mobileFiltersOpen}\n          setMobileFiltersOpen={setMobileFiltersOpen}\n          filters={filters}\n        ></MobileFilter>\n\n        <main className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-baseline justify-between border-b border-gray-200 pb-6 pt-10\">\n            <h1 className=\"text-2xl font-bold tracking-tight text-gray-900\">\n              All Products\n            </h1>\n\n            <div className=\"flex items-center\">\n              <Menu as=\"div\" className=\"relative inline-block text-left\">\n                <div>\n                  <Menu.Button className=\"group inline-flex justify-center text-sm font-medium text-gray-700 hover:text-gray-900\">\n                    Sort\n                    <ChevronDownIcon\n                      className=\"-mr-1 ml-1 h-5 w-5 flex-shrink-0 text-gray-400 group-hover:text-gray-500\"\n                      aria-hidden=\"true\"\n                    />\n                  </Menu.Button>\n                </div>\n\n                <Transition\n                  as={Fragment}\n                  enter=\"transition ease-out duration-100\"\n                  enterFrom=\"transform opacity-0 scale-95\"\n                  enterTo=\"transform opacity-100 scale-100\"\n                  leave=\"transition ease-in duration-75\"\n                  leaveFrom=\"transform opacity-100 scale-100\"\n                  leaveTo=\"transform opacity-0 scale-95\"\n                >\n                  <Menu.Items className=\"absolute right-0 z-10 mt-2 w-40 origin-top-right rounded-md bg-white shadow-2xl ring-1 ring-black ring-opacity-5 focus:outline-none\">\n                    <div className=\"py-1\">\n                      {sortOptions.map((option) => (\n                        <Menu.Item key={option.name}>\n                          {({ active }) => (\n                            <p\n                              onClick={(e) => handleSort(e, option)}\n                              className={classNames(\n                                option.current\n                                  ? 'font-medium text-gray-900'\n                                  : 'text-gray-500',\n                                active ? 'bg-gray-100' : '',\n                                'block px-4 py-2 text-sm'\n                              )}\n                            >\n                              {option.name}\n                            </p>\n                          )}\n                        </Menu.Item>\n                      ))}\n                    </div>\n                  </Menu.Items>\n                </Transition>\n              </Menu>\n\n              <button\n                type=\"button\"\n                className=\"-m-2 ml-5 p-2 text-gray-400 hover:text-gray-500 sm:ml-7\"\n              >\n                <span className=\"sr-only\">View grid</span>\n                <Squares2X2Icon className=\"h-5 w-5\" aria-hidden=\"true\" />\n              </button>\n              <button\n                type=\"button\"\n                className=\"-m-2 ml-4 p-2 text-gray-400 hover:text-gray-500 sm:ml-6 lg:hidden\"\n                onClick={() => setMobileFiltersOpen(true)}\n              >\n                <span className=\"sr-only\">Filters</span>\n                <FunnelIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n              </button>\n            </div>\n          </div>\n\n          <section aria-labelledby=\"products-heading\" className=\"pb-24 pt-6\">\n            <h2 id=\"products-heading\" className=\"sr-only\">\n              Products\n            </h2>\n\n            <div className=\"grid grid-cols-1 gap-x-8 gap-y-10 lg:grid-cols-4\">\n              <DesktopFilter\n                handleFilter={handleFilter}\n                filters={filters}\n              ></DesktopFilter>\n              {/* Product grid */}\n              <div className=\"lg:col-span-3\">\n                <ProductGrid products={products} status={status}></ProductGrid>\n              </div>\n              {/* Product grid end */}\n            </div>\n          </section>\n\n          {/* section of product and filters ends */}\n          <Pagination\n            page={page}\n            setPage={setPage}\n            handlePage={handlePage}\n            totalItems={totalItems}\n          ></Pagination>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nfunction MobileFilter({\n  mobileFiltersOpen,\n  setMobileFiltersOpen,\n  handleFilter,\n  filters,\n}) {\n  return (\n    <Transition.Root show={mobileFiltersOpen} as={Fragment}>\n      <Dialog\n        as=\"div\"\n        className=\"relative z-40 lg:hidden\"\n        onClose={setMobileFiltersOpen}\n      >\n        <Transition.Child\n          as={Fragment}\n          enter=\"transition-opacity ease-linear duration-300\"\n          enterFrom=\"opacity-0\"\n          enterTo=\"opacity-100\"\n          leave=\"transition-opacity ease-linear duration-300\"\n          leaveFrom=\"opacity-100\"\n          leaveTo=\"opacity-0\"\n        >\n          <div className=\"fixed inset-0 bg-black bg-opacity-25\" />\n        </Transition.Child>\n\n        <div className=\"fixed inset-0 z-40 flex\">\n          <Transition.Child\n            as={Fragment}\n            enter=\"transition ease-in-out duration-300 transform\"\n            enterFrom=\"translate-x-full\"\n            enterTo=\"translate-x-0\"\n            leave=\"transition ease-in-out duration-300 transform\"\n            leaveFrom=\"translate-x-0\"\n            leaveTo=\"translate-x-full\"\n          >\n            <Dialog.Panel className=\"relative ml-auto flex h-full w-full max-w-xs flex-col overflow-y-auto bg-white py-4 pb-12 shadow-xl\">\n              <div className=\"flex items-center justify-between px-4\">\n                <h2 className=\"text-lg font-medium text-gray-900\">Filters</h2>\n                <button\n                  type=\"button\"\n                  className=\"-mr-2 flex h-10 w-10 items-center justify-center rounded-md bg-white p-2 text-gray-400\"\n                  onClick={() => setMobileFiltersOpen(false)}\n                >\n                  <span className=\"sr-only\">Close menu</span>\n                  <XMarkIcon className=\"h-6 w-6\" aria-hidden=\"true\" />\n                </button>\n              </div>\n\n              {/* Filters */}\n              <form className=\"mt-4 border-t border-gray-200\">\n                {filters.map((section) => (\n                  <Disclosure\n                    as=\"div\"\n                    key={section.id}\n                    className=\"border-t border-gray-200 px-4 py-6\"\n                  >\n                    {({ open }) => (\n                      <>\n                        <h3 className=\"-mx-2 -my-3 flow-root\">\n                          <Disclosure.Button className=\"flex w-full items-center justify-between bg-white px-2 py-3 text-gray-400 hover:text-gray-500\">\n                            <span className=\"font-medium text-gray-900\">\n                              {section.name}\n                            </span>\n                            <span className=\"ml-6 flex items-center\">\n                              {open ? (\n                                <MinusIcon\n                                  className=\"h-5 w-5\"\n                                  aria-hidden=\"true\"\n                                />\n                              ) : (\n                                <PlusIcon\n                                  className=\"h-5 w-5\"\n                                  aria-hidden=\"true\"\n                                />\n                              )}\n                            </span>\n                          </Disclosure.Button>\n                        </h3>\n                        <Disclosure.Panel className=\"pt-6\">\n                          <div className=\"space-y-6\">\n                            {section.options.map((option, optionIdx) => (\n                              <div\n                                key={option.value}\n                                className=\"flex items-center\"\n                              >\n                                <input\n                                  id={`filter-mobile-${section.id}-${optionIdx}`}\n                                  name={`${section.id}[]`}\n                                  defaultValue={option.value}\n                                  type=\"checkbox\"\n                                  defaultChecked={option.checked}\n                                  onChange={(e) =>\n                                    handleFilter(e, section, option)\n                                  }\n                                  className=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500\"\n                                />\n                                <label\n                                  htmlFor={`filter-mobile-${section.id}-${optionIdx}`}\n                                  className=\"ml-3 min-w-0 flex-1 text-gray-500\"\n                                >\n                                  {option.label}\n                                </label>\n                              </div>\n                            ))}\n                          </div>\n                        </Disclosure.Panel>\n                      </>\n                    )}\n                  </Disclosure>\n                ))}\n              </form>\n            </Dialog.Panel>\n          </Transition.Child>\n        </div>\n      </Dialog>\n    </Transition.Root>\n  );\n}\n\nfunction DesktopFilter({ handleFilter, filters }) {\n  return (\n    <form className=\"hidden lg:block\">\n      {filters.map((section) => (\n        <Disclosure\n          as=\"div\"\n          key={section.id}\n          className=\"border-b border-gray-200 py-6\"\n        >\n          {({ open }) => (\n            <>\n              <h3 className=\"-my-3 flow-root\">\n                <Disclosure.Button className=\"flex w-full items-center justify-between bg-white py-3 text-sm text-gray-400 hover:text-gray-500\">\n                  <span className=\"font-medium text-gray-900\">\n                    {section.name}\n                  </span>\n                  <span className=\"ml-6 flex items-center\">\n                    {open ? (\n                      <MinusIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n                    ) : (\n                      <PlusIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n                    )}\n                  </span>\n                </Disclosure.Button>\n              </h3>\n              <Disclosure.Panel className=\"pt-6\">\n                <div className=\"space-y-4\">\n                  {section.options.map((option, optionIdx) => (\n                    <div key={option.value} className=\"flex items-center\">\n                      <input\n                        id={`filter-${section.id}-${optionIdx}`}\n                        name={`${section.id}[]`}\n                        defaultValue={option.value}\n                        type=\"checkbox\"\n                        defaultChecked={option.checked}\n                        onChange={(e) => handleFilter(e, section, option)}\n                        className=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500\"\n                      />\n                      <label\n                        htmlFor={`filter-${section.id}-${optionIdx}`}\n                        className=\"ml-3 text-sm text-gray-600\"\n                      >\n                        {option.label}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </Disclosure.Panel>\n            </>\n          )}\n        </Disclosure>\n      ))}\n    </form>\n  );\n}\n\nfunction ProductGrid({ products, status }) {\n  return (\n    <div className=\"bg-white\">\n      <div className=\"mx-auto max-w-2xl px-4 py-0 sm:px-6 sm:py-0 lg:max-w-7xl lg:px-8\">\n        <div className=\"mt-6 grid grid-cols-1 gap-x-6 gap-y-10 sm:grid-cols-2 lg:grid-cols-3 xl:gap-x-8\">\n          {status === 'loading' ? (\n            <Grid\n              height=\"80\"\n              width=\"80\"\n              color=\"rgb(79, 70, 229) \"\n              ariaLabel=\"grid-loading\"\n              radius=\"12.5\"\n              wrapperStyle={{}}\n              wrapperClass=\"\"\n              visible={true}\n            />\n          ) : null}\n          {products.map((product) => (\n            <Link to={`/product-detail/${product.id}`} key={product.id}>\n              <div className=\"group relative border-solid border-2 p-2 border-gray-200\">\n                <div className=\"min-h-60 aspect-h-1 aspect-w-1 w-full overflow-hidden rounded-md bg-gray-200 lg:aspect-none group-hover:opacity-75 lg:h-60\">\n                  <img\n                    src={product.thumbnail}\n                    alt={product.title}\n                    className=\"h-full w-full object-cover object-center lg:h-full lg:w-full\"\n                  />\n                </div>\n                <div className=\"mt-4 flex justify-between\">\n                  <div>\n                    <h3 className=\"text-sm text-gray-700\">\n                      <div href={product.thumbnail}>\n                        <span aria-hidden=\"true\" className=\"absolute inset-0\" />\n                        {product.title}\n                      </div>\n                    </h3>\n                   {/* <p className=\"mt-1 text-sm text-gray-500\">\n                      <StarIcon className=\"w-6 h-6 inline\"></StarIcon>\n                      {/*<span className=\" align-bottom\">{product.rating}</span>*/}\n                    {/*</p>*/}\n                  </div>\n                  <div>\n                    <p className=\"text-sm block font-medium text-gray-900\">\n                      Rs. {product.discountPrice}\n                    </p>\n                    <p className=\"text-sm block line-through font-medium text-gray-400\">\n                      ${product.price}\n                    </p>\n                  </div>\n                </div>\n                {product.deleted && (\n                  <div>\n                    <p className=\"text-sm text-red-400\">product deleted</p>\n                  </div>\n                )}\n                {product.stock <= 0 && (\n                  <div>\n                    <p className=\"text-sm text-red-400\">out of stock</p>\n                  </div>\n                )}\n              </div>\n            </Link>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/hyphen/MERN-ecommerce-Frontend/src/features/user/components/UserOrders.js",["332"],[],"import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  fetchLoggedInUserOrderAsync,\n  selectUserInfo,\n  selectUserInfoStatus,\n  selectUserOrders,\n} from '../userSlice';\nimport { Grid } from 'react-loader-spinner';\n\nexport default function UserOrders() {\n  const dispatch = useDispatch();\n  const orders = useSelector(selectUserOrders);\n  const status = useSelector(selectUserInfoStatus);\n\n  useEffect(() => {\n    dispatch(fetchLoggedInUserOrderAsync());\n  }, [dispatch]);\n\n  return (\n    <div>\n      {orders && orders.map((order) => (\n        <div key={order.id}>\n          <div>\n            <div className=\"mx-auto mt-12 bg-white max-w-7xl px-4 sm:px-6 lg:px-8\">\n              <div className=\"border-t border-gray-200 px-4 py-6 sm:px-6\">\n                <h1 className=\"text-4xl my-5 font-bold tracking-tight text-gray-900\">\n                  Order # {order.id}\n                </h1>\n                <h3 className=\"text-xl my-5 font-bold tracking-tight text-red-900\">\n                  Order Status : {order.status}\n                </h3>\n                <div className=\"flow-root\">\n                  <ul className=\"-my-6 divide-y divide-gray-200\">\n                    {order.items.map((item) => (\n                      <li key={item.id} className=\"flex py-6\">\n                        <div className=\"h-24 w-24 flex-shrink-0 overflow-hidden rounded-md border border-gray-200\">\n                          <img\n                            src={item.product.thumbnail}\n                            alt={item.product.title}\n                            className=\"h-full w-full object-cover object-center\"\n                          />\n                        </div>\n\n                        <div className=\"ml-4 flex flex-1 flex-col\">\n                          <div>\n                            <div className=\"flex justify-between text-base font-medium text-gray-900\">\n                              <h3>\n                                <a href={item.product.id}>{item.product.title}</a>\n                              </h3>\n                              <p className=\"ml-4\">${item.product.discountPrice}</p>\n                            </div>\n                            <p className=\"mt-1 text-sm text-gray-500\">\n                              {item.product.brand}\n                            </p>\n                          </div>\n                          <div className=\"flex flex-1 items-end justify-between text-sm\">\n                            <div className=\"text-gray-500\">\n                              <label\n                                htmlFor=\"quantity\"\n                                className=\"inline mr-5 text-sm font-medium leading-6 text-gray-900\"\n                              >\n                                Qty :{item.quantity}\n                              </label>\n                            </div>\n\n                            <div className=\"flex\"></div>\n                          </div>\n                        </div>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n\n              <div className=\"border-t border-gray-200 px-4 py-6 sm:px-6\">\n                <div className=\"flex justify-between my-2 text-base font-medium text-gray-900\">\n                  <p>Subtotal</p>\n                  <p>$ {order.totalAmount}</p>\n                </div>\n                <div className=\"flex justify-between my-2 text-base font-medium text-gray-900\">\n                  <p>Total Items in Cart</p>\n                  <p>{order.totalItems} items</p>\n                </div>\n                <p className=\"mt-0.5 text-sm text-gray-500\">\n                  Shipping Address :\n                </p>\n                <div className=\"flex justify-between gap-x-6 px-5 py-5 border-solid border-2 border-gray-200\">\n                  <div className=\"flex gap-x-4\">\n                    <div className=\"min-w-0 flex-auto\">\n                      <p className=\"text-sm font-semibold leading-6 text-gray-900\">\n                        {order.selectedAddress.name}\n                      </p>\n                      <p className=\"mt-1 truncate text-xs leading-5 text-gray-500\">\n                        {order.selectedAddress.street}\n                      </p>\n                      <p className=\"mt-1 truncate text-xs leading-5 text-gray-500\">\n                        {order.selectedAddress.pinCode}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"hidden sm:flex sm:flex-col sm:items-end\">\n                    <p className=\"text-sm leading-6 text-gray-900\">\n                      Phone: {order.selectedAddress.phone}\n                    </p>\n                    <p className=\"text-sm leading-6 text-gray-500\">\n                      {order.selectedAddress.city}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n       {status === 'loading' ? (\n        <Grid\n          height=\"80\"\n          width=\"80\"\n          color=\"rgb(79, 70, 229) \"\n          ariaLabel=\"grid-loading\"\n          radius=\"12.5\"\n          wrapperStyle={{}}\n          wrapperClass=\"\"\n          visible={true}\n        />\n      ) : null}\n    </div>\n  );\n}\n","/home/hyphen/MERN-ecommerce-Frontend/src/features/user/userAPI.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/features/counter/counterSlice.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/features/auth/authAPI.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/features/cart/cartAPI.js",["333"],[],"export function addToCart(item) {\n  return new Promise(async (resolve) => {\n    const response = await fetch('/cart', {\n      method: 'POST',\n      body: JSON.stringify(item),\n      headers: { 'content-type': 'application/json' },\n    });\n    const data = await response.json();\n    resolve({ data });\n  });\n}\n\nexport function fetchItemsByUserId() {\n  return new Promise(async (resolve) => {\n    const response = await fetch('/cart');\n    const data = await response.json();\n    resolve({ data });\n  });\n}\n\nexport function updateCart(update) {\n  return new Promise(async (resolve) => {\n    const response = await fetch('/cart/' + update.id, {\n      method: 'PATCH',\n      body: JSON.stringify(update),\n      headers: { 'content-type': 'application/json' },\n    });\n    const data = await response.json();\n    resolve({ data });\n  });\n}\n\nexport function deleteItemFromCart(itemId) {\n  return new Promise(async (resolve) => {\n    const response = await fetch('/cart/' + itemId, {\n      method: 'DELETE',\n      headers: { 'content-type': 'application/json' },\n    });\n    const data = await response.json();\n    resolve({ data: { id: itemId } });\n  });\n}\n\nexport function resetCart() {\n  // get all items of user's cart - and then delete each\n  return new Promise(async (resolve) => {\n    const response = await fetchItemsByUserId();\n    const items = response.data;\n    for (let item of items) {\n      await deleteItemFromCart(item.id);\n    }\n    resolve({ status: 'success' });\n  });\n}\n","/home/hyphen/MERN-ecommerce-Frontend/src/features/product/productAPI.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/features/user/components/UserProfile.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/features/admin/components/AdminProductList.js",["334"],[],"import React, { useState, Fragment, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  fetchBrandsAsync,\n  fetchCategoriesAsync,\n  fetchProductsByFiltersAsync,\n  selectAllProducts,\n  selectBrands,\n  selectCategories,\n  selectTotalItems,\n} from '../../product/productSlice';\nimport { Dialog, Disclosure, Menu, Transition } from '@headlessui/react';\nimport { XMarkIcon } from '@heroicons/react/24/outline';\nimport {\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  StarIcon,\n} from '@heroicons/react/20/solid';\nimport { Link } from 'react-router-dom';\nimport {\n  ChevronDownIcon,\n  FunnelIcon,\n  MinusIcon,\n  PlusIcon,\n  Squares2X2Icon,\n} from '@heroicons/react/20/solid';\nimport { ITEMS_PER_PAGE } from '../../../app/constants';\n\nconst sortOptions = [\n  { name: 'Best Rating', sort: 'rating', order: 'desc', current: false },\n  { name: 'Price: Low to High', sort: 'discountPrice', order: 'asc', current: false },\n  { name: 'Price: High to Low', sort: 'discountPrice', order: 'desc', current: false },\n];\n\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(' ');\n}\n\nexport default function AdminProductList() {\n  const dispatch = useDispatch();\n  const products = useSelector(selectAllProducts);\n  const brands = useSelector(selectBrands);\n  const categories = useSelector(selectCategories);\n  const totalItems = useSelector(selectTotalItems);\n  const filters = [\n    {\n      id: 'category',\n      name: 'Category',\n      options: categories,\n    },\n    {\n      id: 'brand',\n      name: 'Brands',\n      options: brands,\n    },\n  ];\n\n  const [filter, setFilter] = useState({});\n  const [sort, setSort] = useState({});\n  const [mobileFiltersOpen, setMobileFiltersOpen] = useState(false);\n  const [page, setPage] = useState(1);\n  const handleFilter = (e, section, option) => {\n    console.log(e.target.checked);\n    const newFilter = { ...filter };\n    if (e.target.checked) {\n      if (newFilter[section.id]) {\n        newFilter[section.id].push(option.value);\n      } else {\n        newFilter[section.id] = [option.value];\n      }\n    } else {\n      const index = newFilter[section.id].findIndex(\n        (el) => el === option.value\n      );\n      newFilter[section.id].splice(index, 1);\n    }\n    console.log({ newFilter });\n\n    setFilter(newFilter);\n  };\n\n  const handleSort = (e, option) => {\n    const sort = { _sort: option.sort, _order: option.order };\n    console.log({ sort });\n    setSort(sort);\n  };\n\n  const handlePage = (page) => {\n    console.log({ page });\n    setPage(page);\n  };\n\n  useEffect(() => {\n    const pagination = { _page: page, _limit: ITEMS_PER_PAGE };\n    dispatch(fetchProductsByFiltersAsync({ filter, sort, pagination, admin:true }));\n  }, [dispatch, filter, sort, page]);\n\n  useEffect(() => {\n    setPage(1);\n  }, [totalItems, sort]);\n\n  useEffect(() => {\n    dispatch(fetchBrandsAsync());\n    dispatch(fetchCategoriesAsync());\n  }, []);\n\n  return (\n    <div className=\"bg-white\">\n      <div>\n        <MobileFilter\n          handleFilter={handleFilter}\n          mobileFiltersOpen={mobileFiltersOpen}\n          setMobileFiltersOpen={setMobileFiltersOpen}\n          filters={filters}\n        ></MobileFilter>\n\n        <main className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-baseline justify-between border-b border-gray-200 pb-6 pt-24\">\n            <h1 className=\"text-4xl font-bold tracking-tight text-gray-900\">\n              All Products\n            </h1>\n\n            <div className=\"flex items-center\">\n              <Menu as=\"div\" className=\"relative inline-block text-left\">\n                <div>\n                  <Menu.Button className=\"group inline-flex justify-center text-sm font-medium text-gray-700 hover:text-gray-900\">\n                    Sort\n                    <ChevronDownIcon\n                      className=\"-mr-1 ml-1 h-5 w-5 flex-shrink-0 text-gray-400 group-hover:text-gray-500\"\n                      aria-hidden=\"true\"\n                    />\n                  </Menu.Button>\n                </div>\n\n                <Transition\n                  as={Fragment}\n                  enter=\"transition ease-out duration-100\"\n                  enterFrom=\"transform opacity-0 scale-95\"\n                  enterTo=\"transform opacity-100 scale-100\"\n                  leave=\"transition ease-in duration-75\"\n                  leaveFrom=\"transform opacity-100 scale-100\"\n                  leaveTo=\"transform opacity-0 scale-95\"\n                >\n                  <Menu.Items className=\"absolute right-0 z-10 mt-2 w-40 origin-top-right rounded-md bg-white shadow-2xl ring-1 ring-black ring-opacity-5 focus:outline-none\">\n                    <div className=\"py-1\">\n                      {sortOptions.map((option) => (\n                        <Menu.Item key={option.name}>\n                          {({ active }) => (\n                            <p\n                              onClick={(e) => handleSort(e, option)}\n                              className={classNames(\n                                option.current\n                                  ? 'font-medium text-gray-900'\n                                  : 'text-gray-500',\n                                active ? 'bg-gray-100' : '',\n                                'block px-4 py-2 text-sm'\n                              )}\n                            >\n                              {option.name}\n                            </p>\n                          )}\n                        </Menu.Item>\n                      ))}\n                    </div>\n                  </Menu.Items>\n                </Transition>\n              </Menu>\n\n              <button\n                type=\"button\"\n                className=\"-m-2 ml-5 p-2 text-gray-400 hover:text-gray-500 sm:ml-7\"\n              >\n                <span className=\"sr-only\">View grid</span>\n                <Squares2X2Icon className=\"h-5 w-5\" aria-hidden=\"true\" />\n              </button>\n              <button\n                type=\"button\"\n                className=\"-m-2 ml-4 p-2 text-gray-400 hover:text-gray-500 sm:ml-6 lg:hidden\"\n                onClick={() => setMobileFiltersOpen(true)}\n              >\n                <span className=\"sr-only\">Filters</span>\n                <FunnelIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n              </button>\n            </div>\n          </div>\n\n          <section aria-labelledby=\"products-heading\" className=\"pb-24 pt-6\">\n            <h2 id=\"products-heading\" className=\"sr-only\">\n              Products\n            </h2>\n\n            <div className=\"grid grid-cols-1 gap-x-8 gap-y-10 lg:grid-cols-4\">\n              <DesktopFilter\n                handleFilter={handleFilter}\n                filters={filters}\n              ></DesktopFilter>\n              {/* Product grid */}\n\n              <div className=\"lg:col-span-3\">\n                <div>\n                  <Link\n                    to=\"/admin/product-form\"\n                    className=\"rounded-md mx-10 my-5 bg-green-700 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-green-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n                  >\n                    Add New Product\n                  </Link>\n                </div>\n                <ProductGrid products={products}></ProductGrid>\n              </div>\n              {/* Product grid end */}\n            </div>\n          </section>\n\n          {/* section of product and filters ends */}\n          <Pagination\n            page={page}\n            setPage={setPage}\n            handlePage={handlePage}\n            totalItems={totalItems}\n          ></Pagination>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nfunction MobileFilter({\n  mobileFiltersOpen,\n  setMobileFiltersOpen,\n  handleFilter,\n  filters,\n}) {\n  return (\n    <Transition.Root show={mobileFiltersOpen} as={Fragment}>\n      <Dialog\n        as=\"div\"\n        className=\"relative z-40 lg:hidden\"\n        onClose={setMobileFiltersOpen}\n      >\n        <Transition.Child\n          as={Fragment}\n          enter=\"transition-opacity ease-linear duration-300\"\n          enterFrom=\"opacity-0\"\n          enterTo=\"opacity-100\"\n          leave=\"transition-opacity ease-linear duration-300\"\n          leaveFrom=\"opacity-100\"\n          leaveTo=\"opacity-0\"\n        >\n          <div className=\"fixed inset-0 bg-black bg-opacity-25\" />\n        </Transition.Child>\n\n        <div className=\"fixed inset-0 z-40 flex\">\n          <Transition.Child\n            as={Fragment}\n            enter=\"transition ease-in-out duration-300 transform\"\n            enterFrom=\"translate-x-full\"\n            enterTo=\"translate-x-0\"\n            leave=\"transition ease-in-out duration-300 transform\"\n            leaveFrom=\"translate-x-0\"\n            leaveTo=\"translate-x-full\"\n          >\n            <Dialog.Panel className=\"relative ml-auto flex h-full w-full max-w-xs flex-col overflow-y-auto bg-white py-4 pb-12 shadow-xl\">\n              <div className=\"flex items-center justify-between px-4\">\n                <h2 className=\"text-lg font-medium text-gray-900\">Filters</h2>\n                <button\n                  type=\"button\"\n                  className=\"-mr-2 flex h-10 w-10 items-center justify-center rounded-md bg-white p-2 text-gray-400\"\n                  onClick={() => setMobileFiltersOpen(false)}\n                >\n                  <span className=\"sr-only\">Close menu</span>\n                  <XMarkIcon className=\"h-6 w-6\" aria-hidden=\"true\" />\n                </button>\n              </div>\n\n              {/* Filters */}\n              <form className=\"mt-4 border-t border-gray-200\">\n                {filters.map((section) => (\n                  <Disclosure\n                    as=\"div\"\n                    key={section.id}\n                    className=\"border-t border-gray-200 px-4 py-6\"\n                  >\n                    {({ open }) => (\n                      <>\n                        <h3 className=\"-mx-2 -my-3 flow-root\">\n                          <Disclosure.Button className=\"flex w-full items-center justify-between bg-white px-2 py-3 text-gray-400 hover:text-gray-500\">\n                            <span className=\"font-medium text-gray-900\">\n                              {section.name}\n                            </span>\n                            <span className=\"ml-6 flex items-center\">\n                              {open ? (\n                                <MinusIcon\n                                  className=\"h-5 w-5\"\n                                  aria-hidden=\"true\"\n                                />\n                              ) : (\n                                <PlusIcon\n                                  className=\"h-5 w-5\"\n                                  aria-hidden=\"true\"\n                                />\n                              )}\n                            </span>\n                          </Disclosure.Button>\n                        </h3>\n                        <Disclosure.Panel className=\"pt-6\">\n                          <div className=\"space-y-6\">\n                            {section.options.map((option, optionIdx) => (\n                              <div\n                                key={option.value}\n                                className=\"flex items-center\"\n                              >\n                                <input\n                                  id={`filter-mobile-${section.id}-${optionIdx}`}\n                                  name={`${section.id}[]`}\n                                  defaultValue={option.value}\n                                  type=\"checkbox\"\n                                  defaultChecked={option.checked}\n                                  onChange={(e) =>\n                                    handleFilter(e, section, option)\n                                  }\n                                  className=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500\"\n                                />\n                                <label\n                                  htmlFor={`filter-mobile-${section.id}-${optionIdx}`}\n                                  className=\"ml-3 min-w-0 flex-1 text-gray-500\"\n                                >\n                                  {option.label}\n                                </label>\n                              </div>\n                            ))}\n                          </div>\n                        </Disclosure.Panel>\n                      </>\n                    )}\n                  </Disclosure>\n                ))}\n              </form>\n            </Dialog.Panel>\n          </Transition.Child>\n        </div>\n      </Dialog>\n    </Transition.Root>\n  );\n}\n\nfunction DesktopFilter({ handleFilter, filters }) {\n  return (\n    <form className=\"hidden lg:block\">\n      {filters.map((section) => (\n        <Disclosure\n          as=\"div\"\n          key={section.id}\n          className=\"border-b border-gray-200 py-6\"\n        >\n          {({ open }) => (\n            <>\n              <h3 className=\"-my-3 flow-root\">\n                <Disclosure.Button className=\"flex w-full items-center justify-between bg-white py-3 text-sm text-gray-400 hover:text-gray-500\">\n                  <span className=\"font-medium text-gray-900\">\n                    {section.name}\n                  </span>\n                  <span className=\"ml-6 flex items-center\">\n                    {open ? (\n                      <MinusIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n                    ) : (\n                      <PlusIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n                    )}\n                  </span>\n                </Disclosure.Button>\n              </h3>\n              <Disclosure.Panel className=\"pt-6\">\n                <div className=\"space-y-4\">\n                  {section.options.map((option, optionIdx) => (\n                    <div key={option.value} className=\"flex items-center\">\n                      <input\n                        id={`filter-${section.id}-${optionIdx}`}\n                        name={`${section.id}[]`}\n                        defaultValue={option.value}\n                        type=\"checkbox\"\n                        defaultChecked={option.checked}\n                        onChange={(e) => handleFilter(e, section, option)}\n                        className=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500\"\n                      />\n                      <label\n                        htmlFor={`filter-${section.id}-${optionIdx}`}\n                        className=\"ml-3 text-sm text-gray-600\"\n                      >\n                        {option.label}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </Disclosure.Panel>\n            </>\n          )}\n        </Disclosure>\n      ))}\n    </form>\n  );\n}\n\nfunction Pagination({ page, setPage, handlePage, totalItems }) {\n  const totalPages = Math.ceil(totalItems / ITEMS_PER_PAGE);\n  return (\n    <div className=\"flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6\">\n      <div className=\"flex flex-1 justify-between sm:hidden\">\n        <div\n          onClick={(e) => handlePage(page > 1 ? page - 1 : page)}\n          className=\"relative inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50\"\n        >\n          Previous\n        </div>\n        <div\n          onClick={(e) => handlePage(page < totalPages ? page + 1 : page)}\n          className=\"relative ml-3 inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50\"\n        >\n          Next\n        </div>\n      </div>\n      <div className=\"hidden sm:flex sm:flex-1 sm:items-center sm:justify-between\">\n        <div>\n          <p className=\"text-sm text-gray-700\">\n            Showing{' '}\n            <span className=\"font-medium\">\n              {(page - 1) * ITEMS_PER_PAGE + 1}\n            </span>{' '}\n            to{' '}\n            <span className=\"font-medium\">\n              {page * ITEMS_PER_PAGE > totalItems\n                ? totalItems\n                : page * ITEMS_PER_PAGE}\n            </span>{' '}\n            of <span className=\"font-medium\">{totalItems}</span> results\n          </p>\n        </div>\n        <div>\n          <nav\n            className=\"isolate inline-flex -space-x-px rounded-md shadow-sm\"\n            aria-label=\"Pagination\"\n          >\n            <div\n              onClick={(e) => handlePage(page > 1 ? page - 1 : page)}\n              className=\"relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0\"\n            >\n              <span className=\"sr-only\">Previous</span>\n              <ChevronLeftIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n            </div>\n            {/* Current: \"z-10 bg-indigo-600 text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\", Default: \"text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:outline-offset-0\" */}\n\n            {Array.from({ length: totalPages }).map((el, index) => (\n              <div\n                key={index}\n                onClick={(e) => handlePage(index + 1)}\n                aria-current=\"page\"\n                className={`relative cursor-pointer z-10 inline-flex items-center ${\n                  index + 1 === page\n                    ? 'bg-indigo-600 text-white'\n                    : 'text-gray-400'\n                } px-4 py-2 text-sm font-semibold  focus:z-20 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600`}\n              >\n                {index + 1}\n              </div>\n            ))}\n\n            <div\n              onClick={(e) => handlePage(page < totalPages ? page + 1 : page)}\n              className=\"relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0\"\n            >\n              <span className=\"sr-only\">Next</span>\n              <ChevronRightIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n            </div>\n          </nav>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction ProductGrid({ products }) {\n  return (\n    <div className=\"bg-white\">\n      <div className=\"mx-auto max-w-2xl px-4 py-0 sm:px-6 sm:py-0 lg:max-w-7xl lg:px-8\">\n        <div className=\"mt-6 grid grid-cols-1 gap-x-6 gap-y-10 sm:grid-cols-2 lg:grid-cols-3 xl:gap-x-8\">\n          {products.map((product) => (\n            <div key={product.id}>\n              <Link to={`/product-detail/${product.id}`} >\n                <div className=\"group relative border-solid border-2 p-2 border-gray-200\">\n                  <div className=\"min-h-60 aspect-h-1 aspect-w-1 w-full overflow-hidden rounded-md bg-gray-200 lg:aspect-none group-hover:opacity-75 lg:h-60\">\n                    <img\n                      src={product.thumbnail}\n                      alt={product.title}\n                      className=\"h-full w-full object-cover object-center lg:h-full lg:w-full\"\n                    />\n                  </div>\n                  <div className=\"mt-4 flex justify-between\">\n                    <div>\n                      <h3 className=\"text-sm text-gray-700\">\n                        <div href={product.thumbnail}>\n                          <span\n                            aria-hidden=\"true\"\n                            className=\"absolute inset-0\"\n                          />\n                          {product.title}\n                        </div>\n                      </h3>\n                      <p className=\"mt-1 text-sm text-gray-500\">\n                        <StarIcon className=\"w-6 h-6 inline\"></StarIcon>\n                        <span className=\" align-bottom\">{product.rating}</span>\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm block font-medium text-gray-900\">\n                        $\n                        {product.discountPrice}\n                      </p>\n                      <p className=\"text-sm block line-through font-medium text-gray-400\">\n                        ${product.price}\n                      </p>\n                    </div>\n                  </div>\n                  {product.deleted && (\n                    <div>\n                      <p className=\"text-sm text-red-400\">product deleted</p>\n                    </div>\n                  )}\n                  {product.stock<=0 && (\n                  <div>\n                    <p className=\"text-sm text-red-400\">out of stock</p>\n                  </div>\n                )}\n                </div>\n              </Link>\n              <div className=\"mt-5\">\n                <Link\n                  to={`/admin/product-form/edit/${product.id}`}\n                  className=\"rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n                >\n                  Edit Product\n                </Link>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/hyphen/MERN-ecommerce-Frontend/src/features/admin/components/AdminProductDetail.js",["335","336","337","338"],[],"import { useState, useEffect } from 'react';\nimport { StarIcon } from '@heroicons/react/20/solid';\nimport { RadioGroup } from '@headlessui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  fetchProductByIdAsync,\n  selectProductById,\n  selectProductListStatus,\n} from '../../product/productSlice';\nimport { useParams } from 'react-router-dom';\nimport { addToCartAsync, selectItems } from '../../cart/cartSlice';\nimport { selectLoggedInUser } from '../../auth/authSlice';\nimport { useAlert } from 'react-alert';\nimport { Grid } from 'react-loader-spinner';\n\n\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(' ');\n}\n\n\nexport default function AdminProductDetail() {\n  const [selectedColor, setSelectedColor] = useState();\n  const [selectedSize, setSelectedSize] = useState();\n  const items = useSelector(selectItems);\n  const product = useSelector(selectProductById);\n  const dispatch = useDispatch();\n  const params = useParams();\n  const alert = useAlert();\n  const status = useSelector(selectProductListStatus);\n\n  const handleCart = (e) => {\n    e.preventDefault();\n    if (items.findIndex((item) => item.product.id === product.id) < 0) {\n      console.log({ items, product });\n      const newItem = {\n        product: product.id,\n        quantity: 1,\n      };\n      if (selectedColor) {\n        newItem.color = selectedColor;\n      }\n      if (selectedSize) {\n        newItem.size = selectedSize;\n      }\n      dispatch(addToCartAsync(newItem));\n      alert.success('Item added to Cart');\n    } else {\n      alert.error('Item Already added');\n    }\n  };\n\n  useEffect(() => {\n    dispatch(fetchProductByIdAsync(params.id));\n  }, [dispatch, params.id]);\n\n  return (\n    <div className=\"bg-white\">\n      {status === 'loading' ? (\n        <Grid\n          height=\"80\"\n          width=\"80\"\n          color=\"rgb(79, 70, 229) \"\n          ariaLabel=\"grid-loading\"\n          radius=\"12.5\"\n          wrapperStyle={{}}\n          wrapperClass=\"\"\n          visible={true}\n        />\n      ) : null}\n      {product && (\n        <div className=\"pt-6\">\n          <nav aria-label=\"Breadcrumb\">\n            <ol className=\"mx-auto flex max-w-2xl items-center space-x-2 px-4 sm:px-6 lg:max-w-7xl lg:px-8\">\n              {product.breadcrumbs &&\n                product.breadcrumbs.map((breadcrumb) => (\n                  <li key={breadcrumb.id}>\n                    <div className=\"flex items-center\">\n                      <a\n                        href={breadcrumb.href}\n                        className=\"mr-2 text-sm font-medium text-gray-900\"\n                      >\n                        {breadcrumb.name}\n                      </a>\n                      <svg\n                        width={16}\n                        height={20}\n                        viewBox=\"0 0 16 20\"\n                        fill=\"currentColor\"\n                        aria-hidden=\"true\"\n                        className=\"h-5 w-4 text-gray-300\"\n                      >\n                        <path d=\"M5.697 4.34L8.98 16.532h1.327L7.025 4.341H5.697z\" />\n                      </svg>\n                    </div>\n                  </li>\n                ))}\n              <li className=\"text-sm\">\n                <a\n                  href={product.href}\n                  aria-current=\"page\"\n                  className=\"font-medium text-gray-500 hover:text-gray-600\"\n                >\n                  {product.title}\n                </a>\n              </li>\n            </ol>\n          </nav>\n\n          {/* Image gallery */}\n          <div className=\"mx-auto mt-6 max-w-2xl sm:px-6 lg:grid lg:max-w-7xl lg:grid-cols-3 lg:gap-x-8 lg:px-8\">\n            <div className=\"aspect-h-4 aspect-w-3 hidden overflow-hidden rounded-lg lg:block\">\n              <img\n                src={product.images[0]}\n                alt={product.title}\n                className=\"h-full w-full object-cover object-center\"\n              />\n            </div>\n            <div className=\"hidden lg:grid lg:grid-cols-1 lg:gap-y-8\">\n              <div className=\"aspect-h-2 aspect-w-3 overflow-hidden rounded-lg\">\n                <img\n                  src={product.images[1]}\n                  alt={product.title}\n                  className=\"h-full w-full object-cover object-center\"\n                />\n              </div>\n              <div className=\"aspect-h-2 aspect-w-3 overflow-hidden rounded-lg\">\n                <img\n                  src={product.images[2]}\n                  alt={product.title}\n                  className=\"h-full w-full object-cover object-center\"\n                />\n              </div>\n            </div>\n            <div className=\"aspect-h-5 aspect-w-4 lg:aspect-h-4 lg:aspect-w-3 sm:overflow-hidden sm:rounded-lg\">\n              <img\n                src={product.images[3]}\n                alt={product.title}\n                className=\"h-full w-full object-cover object-center\"\n              />\n            </div>\n          </div>\n\n          {/* Product info */}\n          <div className=\"mx-auto max-w-2xl px-4 pb-16 pt-10 sm:px-6 lg:grid lg:max-w-7xl lg:grid-cols-3 lg:grid-rows-[auto,auto,1fr] lg:gap-x-8 lg:px-8 lg:pb-24 lg:pt-16\">\n            <div className=\"lg:col-span-2 lg:border-r lg:border-gray-200 lg:pr-8\">\n              <h1 className=\"text-2xl font-bold tracking-tight text-gray-900 sm:text-3xl\">\n                {product.title}\n              </h1>\n            </div>\n\n            {/* Options */}\n            <div className=\"mt-4 lg:row-span-3 lg:mt-0\">\n              <h2 className=\"sr-only\">Product information</h2>\n              <p className=\"text-xl line-through tracking-tight text-gray-900\">\n                ${product.price}\n              </p>\n              <p className=\"text-3xl tracking-tight text-gray-900\">\n                ${product.discountPrice}\n              </p>\n\n              {/* Reviews */}\n{/*              <div className=\"mt-6\">\n                <h3 className=\"sr-only\">Reviews</h3>\n                <div className=\"flex items-center\">\n                  <div className=\"flex items-center\">\n                    {[0, 1, 2, 3, 4].map((rating) => (\n                      <StarIcon\n                        key={rating}\n                        className={classNames(\n                          product.rating > rating\n                            ? 'text-gray-900'\n                            : 'text-gray-200',\n                          'h-5 w-5 flex-shrink-0'\n                        )}\n                        aria-hidden=\"true\"\n                      />\n                    ))}\n                  </div>\n                  <p className=\"sr-only\">{product.rating} out of 5 stars</p>\n                </div>\n              </div>\n\n*/}              <form className=\"mt-10\">\n                {/* Colors */}\n                {product.colors && product.colors.length > 0 && (\n                  <div>\n                    <h3 className=\"text-sm font-medium text-gray-900\">Color</h3>\n\n                    <RadioGroup\n                      value={selectedColor}\n                      onChange={setSelectedColor}\n                      className=\"mt-4\"\n                    >\n                      <RadioGroup.Label className=\"sr-only\">\n                        Choose a color\n                      </RadioGroup.Label>\n                      <div className=\"flex items-center space-x-3\">\n                        {product.colors.map((color) => (\n                          <RadioGroup.Option\n                            key={color.name}\n                            value={color}\n                            className={({ active, checked }) =>\n                              classNames(\n                                color.selectedClass,\n                                active && checked ? 'ring ring-offset-1' : '',\n                                !active && checked ? 'ring-2' : '',\n                                'relative -m-0.5 flex cursor-pointer items-center justify-center rounded-full p-0.5 focus:outline-none'\n                              )\n                            }\n                          >\n                            <RadioGroup.Label as=\"span\" className=\"sr-only\">\n                              {color.name}\n                            </RadioGroup.Label>\n                            <span\n                              aria-hidden=\"true\"\n                              className={classNames(\n                                color.class,\n                                'h-8 w-8 rounded-full border border-black border-opacity-10'\n                              )}\n                            />\n                          </RadioGroup.Option>\n                        ))}\n                      </div>\n                    </RadioGroup>\n                  </div>\n                )}\n\n                {/* Sizes */}\n                {product.sizes && product.sizes.length > 0 && (\n                  <div className=\"mt-10\">\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className=\"text-sm font-medium text-gray-900\">\n                        Size\n                      </h3>\n                      <a\n                        href=\"#\"\n                        className=\"text-sm font-medium text-indigo-600 hover:text-indigo-500\"\n                      >\n                        Size guide\n                      </a>\n                    </div>\n\n                    <RadioGroup\n                      value={selectedSize}\n                      onChange={setSelectedSize}\n                      className=\"mt-4\"\n                    >\n                      <RadioGroup.Label className=\"sr-only\">\n                        Choose a size\n                      </RadioGroup.Label>\n                      <div className=\"grid grid-cols-4 gap-4 sm:grid-cols-8 lg:grid-cols-4\">\n                        {product.sizes.map((size) => (\n                          <RadioGroup.Option\n                            key={size.name}\n                            value={size}\n                            disabled={!size.inStock}\n                            className={({ active }) =>\n                              classNames(\n                                size.inStock\n                                  ? 'cursor-pointer bg-white text-gray-900 shadow-sm'\n                                  : 'cursor-not-allowed bg-gray-50 text-gray-200',\n                                active ? 'ring-2 ring-indigo-500' : '',\n                                'group relative flex items-center justify-center rounded-md border py-3 px-4 text-sm font-medium uppercase hover:bg-gray-50 focus:outline-none sm:flex-1 sm:py-6'\n                              )\n                            }\n                          >\n                            {({ active, checked }) => (\n                              <>\n                                <RadioGroup.Label as=\"span\">\n                                  {size.name}\n                                </RadioGroup.Label>\n                                {size.inStock ? (\n                                  <span\n                                    className={classNames(\n                                      active ? 'border' : 'border-2',\n                                      checked\n                                        ? 'border-indigo-500'\n                                        : 'border-transparent',\n                                      'pointer-events-none absolute -inset-px rounded-md'\n                                    )}\n                                    aria-hidden=\"true\"\n                                  />\n                                ) : (\n                                  <span\n                                    aria-hidden=\"true\"\n                                    className=\"pointer-events-none absolute -inset-px rounded-md border-2 border-gray-200\"\n                                  >\n                                    <svg\n                                      className=\"absolute inset-0 h-full w-full stroke-2 text-gray-200\"\n                                      viewBox=\"0 0 100 100\"\n                                      preserveAspectRatio=\"none\"\n                                      stroke=\"currentColor\"\n                                    >\n                                      <line\n                                        x1={0}\n                                        y1={100}\n                                        x2={100}\n                                        y2={0}\n                                        vectorEffect=\"non-scaling-stroke\"\n                                      />\n                                    </svg>\n                                  </span>\n                                )}\n                              </>\n                            )}\n                          </RadioGroup.Option>\n                        ))}\n                      </div>\n                    </RadioGroup>\n                  </div>\n                )}\n\n                <button\n                  onClick={handleCart}\n                  type=\"submit\"\n                  className=\"mt-10 flex w-full items-center justify-center rounded-md border border-transparent bg-indigo-600 px-8 py-3 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\n                >\n                  Add to Cart\n                </button>\n              </form>\n            </div>\n\n            <div className=\"py-10 lg:col-span-2 lg:col-start-1 lg:border-r lg:border-gray-200 lg:pb-16 lg:pr-8 lg:pt-6\">\n              {/* Description and details */}\n              <div>\n                <h3 className=\"sr-only\">Description</h3>\n\n                <div className=\"space-y-6\">\n                  <p className=\"text-base text-gray-900\">\n                    {product.description}\n                  </p>\n                </div>\n              </div>\n\n              {product.highlights && (\n                <div className=\"mt-10\">\n                  <h3 className=\"text-sm font-medium text-gray-900\">\n                    Highlights\n                  </h3>\n\n                  <div className=\"mt-4\">\n                    <ul\n                      role=\"list\"\n                      className=\"list-disc space-y-2 pl-4 text-sm\"\n                    >\n                      {product.highlights.map((highlight) => (\n                        <li key={highlight} className=\"text-gray-400\">\n                          <span className=\"text-gray-600\">{highlight}</span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              )}\n\n              <div className=\"mt-10\">\n                <h2 className=\"text-sm font-medium text-gray-900\">Details</h2>\n\n                <div className=\"mt-4 space-y-6\">\n                  <p className=\"text-sm text-gray-600\">{product.description}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","/home/hyphen/MERN-ecommerce-Frontend/src/features/order/orderAPI.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/features/admin/components/ProductForm.js",["339"],[],"import { useDispatch, useSelector } from 'react-redux';\nimport {\n  clearSelectedProduct,\n  createProductAsync,\n  fetchProductByIdAsync,\n  selectBrands,\n  selectCategories,\n  selectProductById,\n  updateProductAsync,\n} from '../../product/productSlice';\nimport { useForm } from 'react-hook-form';\nimport { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport Modal from '../../common/Modal';\nimport { useAlert } from 'react-alert';\n\nfunction ProductForm() {\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    reset,\n    formState: { errors },\n  } = useForm();\n  const brands = useSelector(selectBrands);\n  const categories = useSelector(selectCategories);\n  const dispatch = useDispatch();\n  const params = useParams();\n  const selectedProduct = useSelector(selectProductById);\n  const [openModal, setOpenModal] = useState(null);\n  const alert = useAlert();\n\n  const colors = [\n    {\n      name: 'White',\n      class: 'bg-white',\n      selectedClass: 'ring-gray-400',\n      id: 'white',\n    },\n    {\n      name: 'Gray',\n      class: 'bg-gray-200',\n      selectedClass: 'ring-gray-400',\n      id: 'gray',\n    },\n    {\n      name: 'Black',\n      class: 'bg-gray-900',\n      selectedClass: 'ring-gray-900',\n      id: 'black',\n    },\n  ];\n\n  const sizes = [\n    { name: 'XXS', inStock: true, id: 'xxs' },\n    { name: 'XS', inStock: true, id: 'xs' },\n    { name: 'S', inStock: true, id: 's' },\n    { name: 'M', inStock: true, id: 'm' },\n    { name: 'L', inStock: true, id: 'l' },\n    { name: 'XL', inStock: true, id: 'xl' },\n    { name: '2XL', inStock: true, id: '2xl' },\n    { name: '3XL', inStock: true, id: '3xl' },\n  ];\n\n  useEffect(() => {\n    if (params.id) {\n      dispatch(fetchProductByIdAsync(params.id));\n    } else {\n      dispatch(clearSelectedProduct());\n    }\n  }, [params.id, dispatch]);\n\n  useEffect(() => {\n    if (selectedProduct && params.id) {\n      setValue('title', selectedProduct.title);\n      setValue('description', selectedProduct.description);\n      setValue('price', selectedProduct.price);\n      setValue('discountPercentage', selectedProduct.discountPercentage);\n      setValue('thumbnail', selectedProduct.thumbnail);\n      setValue('stock', selectedProduct.stock);\n      setValue('image1', selectedProduct.images[0]);\n      setValue('image2', selectedProduct.images[1]);\n      setValue('image3', selectedProduct.images[2]);\n      setValue('brand', selectedProduct.brand);\n      setValue('category', selectedProduct.category);\n      setValue('highlight1', selectedProduct.highlights[0]);\n      setValue('highlight2', selectedProduct.highlights[1]);\n      setValue('highlight3', selectedProduct.highlights[2]);\n      setValue('highlight4', selectedProduct.highlights[3]);\n      setValue(\n        'sizes',\n        selectedProduct.sizes.map((size) => size.id)\n      );\n      setValue(\n        'colors',\n        selectedProduct.colors.map((color) => color.id)\n      );\n    }\n  }, [selectedProduct, params.id, setValue]);\n\n  const handleDelete = () => {\n    const product = { ...selectedProduct };\n    product.deleted = true;\n    dispatch(updateProductAsync(product));\n  };\n\n  return (\n    <>\n      <form\n        noValidate\n        onSubmit={handleSubmit((data) => {\n          console.log(data);\n          const product = { ...data };\n          product.images = [\n            product.image1,\n            product.image2,\n            product.image3,\n            product.thumbnail,\n          ];\n          product.highlights = [\n            product.highlight1,\n            product.highlight2,\n            product.highlight3,\n            product.highlight4,\n          ];\n          product.rating = 0;\n          if (product.colors) {\n            product.colors = product.colors.map((color) =>\n              colors.find((clr) => clr.id === color)\n            );\n          }\n          if (product.sizes) {\n            product.sizes = product.sizes.map((size) =>\n              sizes.find((sz) => sz.id === size)\n            );\n          }\n\n          delete product['image1'];\n          delete product['image2'];\n          delete product['image3'];\n          product.price = +product.price;\n          product.stock = +product.stock;\n          product.discountPercentage = +product.discountPercentage;\n          console.log(product);\n          if (params.id) {\n            product.id = params.id;\n            product.rating = selectedProduct.rating || 0;\n            dispatch(updateProductAsync(product));\n            alert.success('Product Updated');\n\n            reset();\n          } else {\n            dispatch(createProductAsync(product));\n            alert.success('Product Created');\n            reset();\n          }\n        })}\n      >\n        <div className=\"space-y-12 bg-white p-12\">\n          <div className=\"border-b border-gray-900/10 pb-12\">\n            <h2 className=\"text-base font-semibold leading-7 text-gray-900\">\n              Add Product\n            </h2>\n\n            <div className=\"mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6\">\n              {selectedProduct && selectedProduct.deleted && (\n                <h2 className=\"text-red-500 sm:col-span-6\">\n                  This product is deleted\n                </h2>\n              )}\n\n              <div className=\"sm:col-span-6\">\n                <label\n                  htmlFor=\"title\"\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\n                >\n                  Product Name\n                </label>\n                <div className=\"mt-2\">\n                  <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 \">\n                    <input\n                      type=\"text\"\n                      {...register('title', {\n                        required: 'name is required',\n                      })}\n                      id=\"title\"\n                      className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"col-span-full\">\n                <label\n                  htmlFor=\"description\"\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\n                >\n                  Description\n                </label>\n                <div className=\"mt-2\">\n                  <textarea\n                    id=\"description\"\n                    {...register('description', {\n                      required: 'description is required',\n                    })}\n                    rows={3}\n                    className=\"block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6\"\n                    defaultValue={''}\n                  />\n                </div>\n                <p className=\"mt-3 text-sm leading-6 text-gray-600\">\n                  Write a few sentences about product.\n                </p>\n              </div>\n\n              <div className=\"col-span-full\">\n                <label\n                  htmlFor=\"brand\"\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\n                >\n                  Brand\n                </label>\n                <div className=\"mt-2\">\n                  <select\n                    {...register('brand', {\n                      required: 'brand is required',\n                    })}\n                  >\n                    <option value=\"\">--choose brand--</option>\n                    {brands.map((brand) => (\n                      <option key={brand.value} value={brand.value}>\n                        {brand.label}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n\n              <div className=\"col-span-full\">\n                <label\n                  htmlFor=\"colors\"\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\n                >\n                  Colors\n                </label>\n                <div className=\"mt-2\">\n                  {colors.map((color) => (\n                    <>\n                      <input\n                        type=\"checkbox\"\n                        {...register('colors', {})}\n                        key={color.id}\n                        value={color.id}\n                      />{' '}\n                      {color.name}\n                    </>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"col-span-full\">\n                <label\n                  htmlFor=\"sizes\"\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\n                >\n                  Sizes\n                </label>\n                <div className=\"mt-2\">\n                  {sizes.map((size) => (\n                    <>\n                      <input\n                        type=\"checkbox\"\n                        {...register('sizes', {})}\n                        key={size.id}\n                        value={size.id}\n                      />{' '}\n                      {size.name}\n                    </>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"col-span-full\">\n                <label\n                  htmlFor=\"category\"\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\n                >\n                  Category\n                </label>\n                <div className=\"mt-2\">\n                  <select\n                    {...register('category', {\n                      required: 'category is required',\n                    })}\n                  >\n                    <option value=\"\">--choose category--</option>\n                    {categories.map((category) => (\n                      <option key={category.value} value={category.value}>\n                        {category.label}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n\n              <div className=\"sm:col-span-2\">\n                <label\n                  htmlFor=\"price\"\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\n                >\n                  Price\n                </label>\n                <div className=\"mt-2\">\n                  <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 \">\n                    <input\n                      type=\"number\"\n                      {...register('price', {\n                        required: 'price is required',\n                        min: 1,\n                        max: 10000,\n                      })}\n                      id=\"price\"\n                      className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"sm:col-span-2\">\n                <label\n                  htmlFor=\"discountPercentage\"\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\n                >\n                  Discount Percentage\n                </label>\n                <div className=\"mt-2\">\n                  <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 \">\n                    <input\n                      type=\"number\"\n                      {...register('discountPercentage', {\n                        required: 'discountPercentage is required',\n                        min: 0,\n                        max: 100,\n                      })}\n                      id=\"discountPercentage\"\n                      className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"sm:col-span-2\">\n                <label\n                  htmlFor=\"stock\"\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\n                >\n                  Stock\n                </label>\n                <div className=\"mt-2\">\n                  <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 \">\n                    <input\n                      type=\"number\"\n                      {...register('stock', {\n                        required: 'stock is required',\n                        min: 0,\n                      })}\n                      id=\"stock\"\n                      className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"sm:col-span-6\">\n                <label\n                  htmlFor=\"thumbnail\"\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\n                >\n                  Thumbnail\n                </label>\n                <div className=\"mt-2\">\n                  <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 \">\n                    <input\n                      type=\"text\"\n                      {...register('thumbnail', {\n                        required: 'thumbnail is required',\n                      })}\n                      id=\"thumbnail\"\n                      className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"sm:col-span-6\">\n                <label\n                  htmlFor=\"image1\"\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\n                >\n                  Image 1\n                </label>\n                <div className=\"mt-2\">\n                  <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 \">\n                    <input\n                      type=\"text\"\n                      {...register('image1', {\n                        required: 'image1 is required',\n                      })}\n                      id=\"image1\"\n                      className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"sm:col-span-6\">\n                <label\n                  htmlFor=\"image2\"\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\n                >\n                  Image 2\n                </label>\n                <div className=\"mt-2\">\n                  <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 \">\n                    <input\n                      type=\"text\"\n                      {...register('image2', {\n                        required: 'image is required',\n                      })}\n                      id=\"image2\"\n                      className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"sm:col-span-6\">\n                <label\n                  htmlFor=\"image2\"\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\n                >\n                  Image 3\n                </label>\n                <div className=\"mt-2\">\n                  <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 \">\n                    <input\n                      type=\"text\"\n                      {...register('image3', {\n                        required: 'image is required',\n                      })}\n                      id=\"image3\"\n                      className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"sm:col-span-6\">\n                <label\n                  htmlFor=\"highlight1\"\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\n                >\n                  Highlight 1\n                </label>\n                <div className=\"mt-2\">\n                  <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 \">\n                    <input\n                      type=\"text\"\n                      {...register('highlight1', {})}\n                      id=\"highlight1\"\n                      className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\n                    />\n                  </div>\n                </div>\n              </div>\n              <div className=\"sm:col-span-6\">\n                <label\n                  htmlFor=\"highlight2\"\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\n                >\n                  Highlight 2\n                </label>\n                <div className=\"mt-2\">\n                  <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 \">\n                    <input\n                      type=\"text\"\n                      {...register('highlight2', {})}\n                      id=\"highlight2\"\n                      className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\n                    />\n                  </div>\n                </div>\n              </div>\n              <div className=\"sm:col-span-6\">\n                <label\n                  htmlFor=\"highlight3\"\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\n                >\n                  Highlight 3\n                </label>\n                <div className=\"mt-2\">\n                  <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 \">\n                    <input\n                      type=\"text\"\n                      {...register('highlight3', {})}\n                      id=\"highlight3\"\n                      className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\n                    />\n                  </div>\n                </div>\n              </div>\n              <div className=\"sm:col-span-6\">\n                <label\n                  htmlFor=\"highlight4\"\n                  className=\"block text-sm font-medium leading-6 text-gray-900\"\n                >\n                  Highlight 4\n                </label>\n                <div className=\"mt-2\">\n                  <div className=\"flex rounded-md shadow-sm ring-1 ring-inset ring-gray-300 focus-within:ring-2 focus-within:ring-inset focus-within:ring-indigo-600 \">\n                    <input\n                      type=\"text\"\n                      {...register('highlight4', {})}\n                      id=\"highlight4\"\n                      className=\"block flex-1 border-0 bg-transparent py-1.5 pl-1 text-gray-900 placeholder:text-gray-400 focus:ring-0 sm:text-sm sm:leading-6\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"border-b border-gray-900/10 pb-12\">\n            <h2 className=\"text-base font-semibold leading-7 text-gray-900\">\n              Extra{' '}\n            </h2>\n\n            <div className=\"mt-10 space-y-10\">\n              <fieldset>\n                <legend className=\"text-sm font-semibold leading-6 text-gray-900\">\n                  By Email\n                </legend>\n                <div className=\"mt-6 space-y-6\">\n                  <div className=\"relative flex gap-x-3\">\n                    <div className=\"flex h-6 items-center\">\n                      <input\n                        id=\"comments\"\n                        name=\"comments\"\n                        type=\"checkbox\"\n                        className=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600\"\n                      />\n                    </div>\n                    <div className=\"text-sm leading-6\">\n                      <label\n                        htmlFor=\"comments\"\n                        className=\"font-medium text-gray-900\"\n                      >\n                        Comments\n                      </label>\n                      <p className=\"text-gray-500\">\n                        Get notified when someones posts a comment on a posting.\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"relative flex gap-x-3\">\n                    <div className=\"flex h-6 items-center\">\n                      <input\n                        id=\"candidates\"\n                        name=\"candidates\"\n                        type=\"checkbox\"\n                        className=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600\"\n                      />\n                    </div>\n                    <div className=\"text-sm leading-6\">\n                      <label\n                        htmlFor=\"candidates\"\n                        className=\"font-medium text-gray-900\"\n                      >\n                        Candidates\n                      </label>\n                      <p className=\"text-gray-500\">\n                        Get notified when a candidate applies for a job.\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"relative flex gap-x-3\">\n                    <div className=\"flex h-6 items-center\">\n                      <input\n                        id=\"offers\"\n                        name=\"offers\"\n                        type=\"checkbox\"\n                        className=\"h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600\"\n                      />\n                    </div>\n                    <div className=\"text-sm leading-6\">\n                      <label\n                        htmlFor=\"offers\"\n                        className=\"font-medium text-gray-900\"\n                      >\n                        Offers\n                      </label>\n                      <p className=\"text-gray-500\">\n                        Get notified when a candidate accepts or rejects an\n                        offer.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </fieldset>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-6 flex items-center justify-end gap-x-6\">\n          <button\n            type=\"button\"\n            className=\"text-sm font-semibold leading-6 text-gray-900\"\n          >\n            Cancel\n          </button>\n\n          {selectedProduct && !selectedProduct.deleted && (\n            <button\n              onClick={(e) => {\n                e.preventDefault();\n                setOpenModal(true);\n              }}\n              className=\"rounded-md bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n            >\n              Delete\n            </button>\n          )}\n\n          <button\n            type=\"submit\"\n            className=\"rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600\"\n          >\n            Save\n          </button>\n        </div>\n      </form>\n      {selectedProduct && (\n        <Modal\n          title={`Delete ${selectedProduct.title}`}\n          message=\"Are you sure you want to delete this Product ?\"\n          dangerOption=\"Delete\"\n          cancelOption=\"Cancel\"\n          dangerAction={handleDelete}\n          cancelAction={() => setOpenModal(null)}\n          showModal={openModal}\n        ></Modal>\n      )}\n    </>\n  );\n}\n\nexport default ProductForm;\n","/home/hyphen/MERN-ecommerce-Frontend/src/features/admin/components/AdminOrders.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/features/common/Modal.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/app/constants.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/features/counter/counterAPI.js",[],[],"/home/hyphen/MERN-ecommerce-Frontend/src/features/common/Pagination.js",[],[],{"ruleId":"340","severity":1,"message":"341","line":1,"column":10,"nodeType":"342","messageId":"343","endLine":1,"endColumn":17},{"ruleId":"340","severity":1,"message":"344","line":7,"column":31,"nodeType":"342","messageId":"343","endLine":7,"endColumn":35},{"ruleId":"340","severity":1,"message":"345","line":1,"column":26,"nodeType":"342","messageId":"343","endLine":1,"endColumn":39},{"ruleId":"340","severity":1,"message":"346","line":4,"column":23,"nodeType":"342","messageId":"343","endLine":4,"endColumn":34},{"ruleId":"340","severity":1,"message":"347","line":5,"column":10,"nodeType":"342","messageId":"343","endLine":5,"endColumn":28},{"ruleId":"348","severity":1,"message":"349","line":411,"column":19,"nodeType":"350","endLine":411,"endColumn":78},{"ruleId":"340","severity":1,"message":"344","line":1,"column":10,"nodeType":"342","messageId":"343","endLine":1,"endColumn":14},{"ruleId":"351","severity":1,"message":"352","line":29,"column":6,"nodeType":"353","endLine":29,"endColumn":8,"suggestions":"354"},{"ruleId":"340","severity":1,"message":"355","line":1,"column":17,"nodeType":"342","messageId":"343","endLine":1,"endColumn":25},{"ruleId":"340","severity":1,"message":"356","line":4,"column":3,"nodeType":"342","messageId":"343","endLine":4,"endColumn":12},{"ruleId":"340","severity":1,"message":"357","line":5,"column":3,"nodeType":"342","messageId":"343","endLine":5,"endColumn":17},{"ruleId":"340","severity":1,"message":"358","line":10,"column":9,"nodeType":"342","messageId":"343","endLine":10,"endColumn":14},{"ruleId":"340","severity":1,"message":"359","line":11,"column":9,"nodeType":"342","messageId":"343","endLine":11,"endColumn":17},{"ruleId":"340","severity":1,"message":"360","line":10,"column":10,"nodeType":"342","messageId":"343","endLine":10,"endColumn":20},{"ruleId":"340","severity":1,"message":"361","line":3,"column":3,"nodeType":"342","messageId":"343","endLine":3,"endColumn":19},{"ruleId":"362","severity":1,"message":"363","line":56,"column":36,"nodeType":"364","messageId":"365","endLine":56,"endColumn":37,"suggestions":"366"},{"ruleId":"362","severity":1,"message":"363","line":56,"column":45,"nodeType":"364","messageId":"365","endLine":56,"endColumn":46,"suggestions":"367"},{"ruleId":"362","severity":1,"message":"363","line":55,"column":36,"nodeType":"364","messageId":"365","endLine":55,"endColumn":37,"suggestions":"368"},{"ruleId":"362","severity":1,"message":"363","line":55,"column":45,"nodeType":"364","messageId":"365","endLine":55,"endColumn":46,"suggestions":"369"},{"ruleId":"362","severity":1,"message":"363","line":63,"column":36,"nodeType":"364","messageId":"365","endLine":63,"endColumn":37,"suggestions":"370"},{"ruleId":"362","severity":1,"message":"363","line":63,"column":45,"nodeType":"364","messageId":"365","endLine":63,"endColumn":46,"suggestions":"371"},{"ruleId":"340","severity":1,"message":"347","line":11,"column":10,"nodeType":"342","messageId":"343","endLine":11,"endColumn":28},{"ruleId":"340","severity":1,"message":"372","line":2,"column":10,"nodeType":"342","messageId":"343","endLine":2,"endColumn":18},{"ruleId":"340","severity":1,"message":"347","line":12,"column":10,"nodeType":"342","messageId":"343","endLine":12,"endColumn":28},{"ruleId":"373","severity":1,"message":"374","line":235,"column":23,"nodeType":"350","endLine":238,"endColumn":24},{"ruleId":"348","severity":1,"message":"349","line":342,"column":21,"nodeType":"350","endLine":345,"endColumn":22},{"ruleId":"340","severity":1,"message":"375","line":16,"column":3,"nodeType":"342","messageId":"343","endLine":16,"endColumn":18},{"ruleId":"340","severity":1,"message":"376","line":17,"column":3,"nodeType":"342","messageId":"343","endLine":17,"endColumn":19},{"ruleId":"340","severity":1,"message":"372","line":18,"column":3,"nodeType":"342","messageId":"343","endLine":18,"endColumn":11},{"ruleId":"351","severity":1,"message":"377","line":110,"column":6,"nodeType":"353","endLine":110,"endColumn":8,"suggestions":"378"},{"ruleId":"340","severity":1,"message":"379","line":5,"column":3,"nodeType":"342","messageId":"343","endLine":5,"endColumn":17},{"ruleId":"340","severity":1,"message":"380","line":39,"column":11,"nodeType":"342","messageId":"343","endLine":39,"endColumn":15},{"ruleId":"351","severity":1,"message":"377","line":105,"column":6,"nodeType":"353","endLine":105,"endColumn":8,"suggestions":"381"},{"ruleId":"340","severity":1,"message":"372","line":2,"column":10,"nodeType":"342","messageId":"343","endLine":2,"endColumn":18},{"ruleId":"340","severity":1,"message":"347","line":12,"column":10,"nodeType":"342","messageId":"343","endLine":12,"endColumn":28},{"ruleId":"373","severity":1,"message":"374","line":236,"column":23,"nodeType":"350","endLine":239,"endColumn":24},{"ruleId":"348","severity":1,"message":"349","line":343,"column":21,"nodeType":"350","endLine":346,"endColumn":22},{"ruleId":"340","severity":1,"message":"382","line":23,"column":18,"nodeType":"342","messageId":"343","endLine":23,"endColumn":24},"no-unused-vars","'Counter' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'createReducer' is defined but never used.","'useSelector' is defined but never used.","'selectLoggedInUser' is defined but never used.","jsx-a11y/no-redundant-roles","The element ul has an implicit role of list. Defining this explicitly is redundant and should be avoided.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentOrder.id' and 'currentOrder.totalAmount'. Either include them or remove the dependency array.","ArrayExpression",["383"],"'useState' is defined but never used.","'increment' is defined but never used.","'incrementAsync' is defined but never used.","'count' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'updateUser' is defined but never used.","'fetchAllProducts' is defined but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["384","385"],["386","387"],["388","389"],["390","391"],["392","393"],["394","395"],"'StarIcon' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'ChevronLeftIcon' is defined but never used.","'ChevronRightIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["396"],"'selectUserInfo' is defined but never used.","'data' is assigned a value but never used.",["397"],"'errors' is assigned a value but never used.",{"desc":"398","fix":"399"},{"messageId":"400","fix":"401","desc":"402"},{"messageId":"403","fix":"404","desc":"405"},{"messageId":"400","fix":"406","desc":"402"},{"messageId":"403","fix":"407","desc":"405"},{"messageId":"400","fix":"408","desc":"402"},{"messageId":"403","fix":"409","desc":"405"},{"messageId":"400","fix":"410","desc":"402"},{"messageId":"403","fix":"411","desc":"405"},{"messageId":"400","fix":"412","desc":"402"},{"messageId":"403","fix":"413","desc":"405"},{"messageId":"400","fix":"414","desc":"402"},{"messageId":"403","fix":"415","desc":"405"},{"desc":"416","fix":"417"},{"desc":"416","fix":"418"},"Update the dependencies array to be: [currentOrder.id, currentOrder.totalAmount]",{"range":"419","text":"420"},"removeEscape",{"range":"421","text":"422"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"423","text":"424"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"425","text":"422"},{"range":"426","text":"424"},{"range":"427","text":"422"},{"range":"428","text":"424"},{"range":"429","text":"422"},{"range":"430","text":"424"},{"range":"431","text":"422"},{"range":"432","text":"424"},{"range":"433","text":"422"},{"range":"434","text":"424"},"Update the dependencies array to be: [dispatch]",{"range":"435","text":"436"},{"range":"437","text":"436"},[1190,1192],"[currentOrder.id, currentOrder.totalAmount]",[1840,1841],"",[1840,1840],"\\",[1849,1850],[1849,1849],[1717,1718],[1717,1717],[1726,1727],[1726,1726],[1941,1942],[1941,1941],[1950,1951],[1950,1950],[3067,3069],"[dispatch]",[2917,2919]]